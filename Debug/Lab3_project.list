
Lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c5c  08002c5c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002c5c  08002c5c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c5c  08002c5c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  08002c7c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002c7c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dfd  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7c  00000000  00000000  00029e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c96  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bde3  00000000  00000000  00043b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827a0  00000000  00000000  0004f981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  000d2174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c20 	.word	0x08002c20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002c20 	.word	0x08002c20

0800014c <trafficLightOn>:
#include "timer.h"
#include "defination.h"

int sseg_buffer[SSEG_AMOUNT];
int sseg_index = 0;
void trafficLightOn(enum LightDecode light) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  	  switch(light) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b05      	cmp	r3, #5
 800015a:	d86f      	bhi.n	800023c <trafficLightOn+0xf0>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <trafficLightOn+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	0800019d 	.word	0x0800019d
 800016c:	080001bd 	.word	0x080001bd
 8000170:	080001dd 	.word	0x080001dd
 8000174:	080001fd 	.word	0x080001fd
 8000178:	0800021d 	.word	0x0800021d
  	  case RED1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	2120      	movs	r1, #32
 8000180:	4830      	ldr	r0, [pc, #192]	; (8000244 <trafficLightOn+0xf8>)
 8000182:	f001 fd2c 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 8000186:	2200      	movs	r2, #0
 8000188:	2140      	movs	r1, #64	; 0x40
 800018a:	482e      	ldr	r0, [pc, #184]	; (8000244 <trafficLightOn+0xf8>)
 800018c:	f001 fd27 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 8000190:	2200      	movs	r2, #0
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	482b      	ldr	r0, [pc, #172]	; (8000244 <trafficLightOn+0xf8>)
 8000196:	f001 fd22 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 800019a:	e04f      	b.n	800023c <trafficLightOn+0xf0>
  	  case GREEN1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	2120      	movs	r1, #32
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <trafficLightOn+0xf8>)
 80001a2:	f001 fd1c 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2140      	movs	r1, #64	; 0x40
 80001aa:	4826      	ldr	r0, [pc, #152]	; (8000244 <trafficLightOn+0xf8>)
 80001ac:	f001 fd17 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4823      	ldr	r0, [pc, #140]	; (8000244 <trafficLightOn+0xf8>)
 80001b6:	f001 fd12 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 80001ba:	e03f      	b.n	800023c <trafficLightOn+0xf0>
  	  case YELLOW1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2120      	movs	r1, #32
 80001c0:	4820      	ldr	r0, [pc, #128]	; (8000244 <trafficLightOn+0xf8>)
 80001c2:	f001 fd0c 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2140      	movs	r1, #64	; 0x40
 80001ca:	481e      	ldr	r0, [pc, #120]	; (8000244 <trafficLightOn+0xf8>)
 80001cc:	f001 fd07 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	481b      	ldr	r0, [pc, #108]	; (8000244 <trafficLightOn+0xf8>)
 80001d6:	f001 fd02 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 80001da:	e02f      	b.n	800023c <trafficLightOn+0xf0>
  	  case RED2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	2104      	movs	r1, #4
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <trafficLightOn+0xf8>)
 80001e2:	f001 fcfc 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	4816      	ldr	r0, [pc, #88]	; (8000244 <trafficLightOn+0xf8>)
 80001ec:	f001 fcf7 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	4813      	ldr	r0, [pc, #76]	; (8000244 <trafficLightOn+0xf8>)
 80001f6:	f001 fcf2 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 80001fa:	e01f      	b.n	800023c <trafficLightOn+0xf0>
  	  case GREEN2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	4810      	ldr	r0, [pc, #64]	; (8000244 <trafficLightOn+0xf8>)
 8000202:	f001 fcec 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <trafficLightOn+0xf8>)
 800020c:	f001 fce7 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2110      	movs	r1, #16
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <trafficLightOn+0xf8>)
 8000216:	f001 fce2 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 800021a:	e00f      	b.n	800023c <trafficLightOn+0xf0>
  	  case YELLOW2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2104      	movs	r1, #4
 8000220:	4808      	ldr	r0, [pc, #32]	; (8000244 <trafficLightOn+0xf8>)
 8000222:	f001 fcdc 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <trafficLightOn+0xf8>)
 800022c:	f001 fcd7 	bl	8001bde <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <trafficLightOn+0xf8>)
 8000236:	f001 fcd2 	bl	8001bde <HAL_GPIO_WritePin>
  		  break;
 800023a:	bf00      	nop
  	  }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <setUpBlinkLed>:
void setUpBlinkLed(enum ColorDecode colorDecode) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	switch(colorDecode) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d014      	beq.n	8000282 <setUpBlinkLed+0x3a>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc19      	bgt.n	8000290 <setUpBlinkLed+0x48>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <setUpBlinkLed+0x1e>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d007      	beq.n	8000274 <setUpBlinkLed+0x2c>
	case YELLOW_LED:
		trafficLightOn(YELLOW1);
		trafficLightOn(YELLOW2);
		break;
	}
}
 8000264:	e014      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(RED1);
 8000266:	2000      	movs	r0, #0
 8000268:	f7ff ff70 	bl	800014c <trafficLightOn>
		trafficLightOn(RED2);
 800026c:	2003      	movs	r0, #3
 800026e:	f7ff ff6d 	bl	800014c <trafficLightOn>
		break;
 8000272:	e00d      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(GREEN1);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff69 	bl	800014c <trafficLightOn>
		trafficLightOn(GREEN2);
 800027a:	2004      	movs	r0, #4
 800027c:	f7ff ff66 	bl	800014c <trafficLightOn>
		break;
 8000280:	e006      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(YELLOW1);
 8000282:	2002      	movs	r0, #2
 8000284:	f7ff ff62 	bl	800014c <trafficLightOn>
		trafficLightOn(YELLOW2);
 8000288:	2005      	movs	r0, #5
 800028a:	f7ff ff5f 	bl	800014c <trafficLightOn>
		break;
 800028e:	bf00      	nop
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <blinkLed>:
void blinkLed(enum ColorDecode colorDecode) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	switch(colorDecode) {
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d018      	beq.n	80002da <blinkLed+0x42>
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	dc1f      	bgt.n	80002ec <blinkLed+0x54>
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <blinkLed+0x1e>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d009      	beq.n	80002c8 <blinkLed+0x30>
	case YELLOW_LED:
		HAL_GPIO_TogglePin(YEL_1_GPIO_Port, YEL_1_Pin);
		HAL_GPIO_TogglePin(YEL_2_GPIO_Port, YEL_2_Pin);
		break;
	}
}
 80002b4:	e01a      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 80002b6:	2120      	movs	r1, #32
 80002b8:	480e      	ldr	r0, [pc, #56]	; (80002f4 <blinkLed+0x5c>)
 80002ba:	f001 fca8 	bl	8001c0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 80002be:	2104      	movs	r1, #4
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <blinkLed+0x5c>)
 80002c2:	f001 fca4 	bl	8001c0e <HAL_GPIO_TogglePin>
		break;
 80002c6:	e011      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(GRE_1_GPIO_Port, GRE_1_Pin);
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <blinkLed+0x5c>)
 80002cc:	f001 fc9f 	bl	8001c0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GRE_2_GPIO_Port, GRE_2_Pin);
 80002d0:	2110      	movs	r1, #16
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <blinkLed+0x5c>)
 80002d4:	f001 fc9b 	bl	8001c0e <HAL_GPIO_TogglePin>
		break;
 80002d8:	e008      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(YEL_1_GPIO_Port, YEL_1_Pin);
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <blinkLed+0x5c>)
 80002de:	f001 fc96 	bl	8001c0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YEL_2_GPIO_Port, YEL_2_Pin);
 80002e2:	2108      	movs	r1, #8
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <blinkLed+0x5c>)
 80002e6:	f001 fc92 	bl	8001c0e <HAL_GPIO_TogglePin>
		break;
 80002ea:	bf00      	nop
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800

080002f8 <display7SEG>:
void display7SEG(int num) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b09      	cmp	r3, #9
 8000304:	f200 81c0 	bhi.w	8000688 <display7SEG+0x390>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <display7SEG+0x18>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	08000339 	.word	0x08000339
 8000314:	0800038d 	.word	0x0800038d
 8000318:	080003e1 	.word	0x080003e1
 800031c:	08000435 	.word	0x08000435
 8000320:	08000489 	.word	0x08000489
 8000324:	080004dd 	.word	0x080004dd
 8000328:	08000531 	.word	0x08000531
 800032c:	08000585 	.word	0x08000585
 8000330:	080005d9 	.word	0x080005d9
 8000334:	0800062d 	.word	0x0800062d
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	48d0      	ldr	r0, [pc, #832]	; (8000680 <display7SEG+0x388>)
 800033e:	f001 fc4e 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000348:	48ce      	ldr	r0, [pc, #824]	; (8000684 <display7SEG+0x38c>)
 800034a:	f001 fc48 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000354:	48cb      	ldr	r0, [pc, #812]	; (8000684 <display7SEG+0x38c>)
 8000356:	f001 fc42 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	48c8      	ldr	r0, [pc, #800]	; (8000684 <display7SEG+0x38c>)
 8000362:	f001 fc3c 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036c:	48c5      	ldr	r0, [pc, #788]	; (8000684 <display7SEG+0x38c>)
 800036e:	f001 fc36 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000378:	48c2      	ldr	r0, [pc, #776]	; (8000684 <display7SEG+0x38c>)
 800037a:	f001 fc30 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	48bf      	ldr	r0, [pc, #764]	; (8000684 <display7SEG+0x38c>)
 8000386:	f001 fc2a 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 800038a:	e1a7      	b.n	80006dc <display7SEG+0x3e4>
		case 1:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	48bb      	ldr	r0, [pc, #748]	; (8000680 <display7SEG+0x388>)
 8000392:	f001 fc24 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	48b9      	ldr	r0, [pc, #740]	; (8000684 <display7SEG+0x38c>)
 800039e:	f001 fc1e 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	48b6      	ldr	r0, [pc, #728]	; (8000684 <display7SEG+0x38c>)
 80003aa:	f001 fc18 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b4:	48b3      	ldr	r0, [pc, #716]	; (8000684 <display7SEG+0x38c>)
 80003b6:	f001 fc12 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c0:	48b0      	ldr	r0, [pc, #704]	; (8000684 <display7SEG+0x38c>)
 80003c2:	f001 fc0c 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003cc:	48ad      	ldr	r0, [pc, #692]	; (8000684 <display7SEG+0x38c>)
 80003ce:	f001 fc06 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	48aa      	ldr	r0, [pc, #680]	; (8000684 <display7SEG+0x38c>)
 80003da:	f001 fc00 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 80003de:	e17d      	b.n	80006dc <display7SEG+0x3e4>
		case 2:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	48a6      	ldr	r0, [pc, #664]	; (8000680 <display7SEG+0x388>)
 80003e6:	f001 fbfa 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	48a4      	ldr	r0, [pc, #656]	; (8000684 <display7SEG+0x38c>)
 80003f2:	f001 fbf4 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	48a1      	ldr	r0, [pc, #644]	; (8000684 <display7SEG+0x38c>)
 80003fe:	f001 fbee 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000408:	489e      	ldr	r0, [pc, #632]	; (8000684 <display7SEG+0x38c>)
 800040a:	f001 fbe8 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000414:	489b      	ldr	r0, [pc, #620]	; (8000684 <display7SEG+0x38c>)
 8000416:	f001 fbe2 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	4898      	ldr	r0, [pc, #608]	; (8000684 <display7SEG+0x38c>)
 8000422:	f001 fbdc 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	4895      	ldr	r0, [pc, #596]	; (8000684 <display7SEG+0x38c>)
 800042e:	f001 fbd6 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 8000432:	e153      	b.n	80006dc <display7SEG+0x3e4>
		case 3:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	4891      	ldr	r0, [pc, #580]	; (8000680 <display7SEG+0x388>)
 800043a:	f001 fbd0 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000444:	488f      	ldr	r0, [pc, #572]	; (8000684 <display7SEG+0x38c>)
 8000446:	f001 fbca 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000450:	488c      	ldr	r0, [pc, #560]	; (8000684 <display7SEG+0x38c>)
 8000452:	f001 fbc4 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4889      	ldr	r0, [pc, #548]	; (8000684 <display7SEG+0x38c>)
 800045e:	f001 fbbe 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000468:	4886      	ldr	r0, [pc, #536]	; (8000684 <display7SEG+0x38c>)
 800046a:	f001 fbb8 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000474:	4883      	ldr	r0, [pc, #524]	; (8000684 <display7SEG+0x38c>)
 8000476:	f001 fbb2 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4880      	ldr	r0, [pc, #512]	; (8000684 <display7SEG+0x38c>)
 8000482:	f001 fbac 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 8000486:	e129      	b.n	80006dc <display7SEG+0x3e4>
		case 4:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	487c      	ldr	r0, [pc, #496]	; (8000680 <display7SEG+0x388>)
 800048e:	f001 fba6 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	487a      	ldr	r0, [pc, #488]	; (8000684 <display7SEG+0x38c>)
 800049a:	f001 fba0 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	4877      	ldr	r0, [pc, #476]	; (8000684 <display7SEG+0x38c>)
 80004a6:	f001 fb9a 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4874      	ldr	r0, [pc, #464]	; (8000684 <display7SEG+0x38c>)
 80004b2:	f001 fb94 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	4871      	ldr	r0, [pc, #452]	; (8000684 <display7SEG+0x38c>)
 80004be:	f001 fb8e 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	486e      	ldr	r0, [pc, #440]	; (8000684 <display7SEG+0x38c>)
 80004ca:	f001 fb88 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	486b      	ldr	r0, [pc, #428]	; (8000684 <display7SEG+0x38c>)
 80004d6:	f001 fb82 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 80004da:	e0ff      	b.n	80006dc <display7SEG+0x3e4>
		case 5:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4867      	ldr	r0, [pc, #412]	; (8000680 <display7SEG+0x388>)
 80004e2:	f001 fb7c 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4865      	ldr	r0, [pc, #404]	; (8000684 <display7SEG+0x38c>)
 80004ee:	f001 fb76 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4862      	ldr	r0, [pc, #392]	; (8000684 <display7SEG+0x38c>)
 80004fa:	f001 fb70 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	485f      	ldr	r0, [pc, #380]	; (8000684 <display7SEG+0x38c>)
 8000506:	f001 fb6a 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000510:	485c      	ldr	r0, [pc, #368]	; (8000684 <display7SEG+0x38c>)
 8000512:	f001 fb64 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	4859      	ldr	r0, [pc, #356]	; (8000684 <display7SEG+0x38c>)
 800051e:	f001 fb5e 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4856      	ldr	r0, [pc, #344]	; (8000684 <display7SEG+0x38c>)
 800052a:	f001 fb58 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 800052e:	e0d5      	b.n	80006dc <display7SEG+0x3e4>
		case 6:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	4852      	ldr	r0, [pc, #328]	; (8000680 <display7SEG+0x388>)
 8000536:	f001 fb52 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000540:	4850      	ldr	r0, [pc, #320]	; (8000684 <display7SEG+0x38c>)
 8000542:	f001 fb4c 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054c:	484d      	ldr	r0, [pc, #308]	; (8000684 <display7SEG+0x38c>)
 800054e:	f001 fb46 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000558:	484a      	ldr	r0, [pc, #296]	; (8000684 <display7SEG+0x38c>)
 800055a:	f001 fb40 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000564:	4847      	ldr	r0, [pc, #284]	; (8000684 <display7SEG+0x38c>)
 8000566:	f001 fb3a 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	4844      	ldr	r0, [pc, #272]	; (8000684 <display7SEG+0x38c>)
 8000572:	f001 fb34 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4841      	ldr	r0, [pc, #260]	; (8000684 <display7SEG+0x38c>)
 800057e:	f001 fb2e 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 8000582:	e0ab      	b.n	80006dc <display7SEG+0x3e4>
		case 7:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	483d      	ldr	r0, [pc, #244]	; (8000680 <display7SEG+0x388>)
 800058a:	f001 fb28 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	483b      	ldr	r0, [pc, #236]	; (8000684 <display7SEG+0x38c>)
 8000596:	f001 fb22 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4838      	ldr	r0, [pc, #224]	; (8000684 <display7SEG+0x38c>)
 80005a2:	f001 fb1c 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4835      	ldr	r0, [pc, #212]	; (8000684 <display7SEG+0x38c>)
 80005ae:	f001 fb16 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	4832      	ldr	r0, [pc, #200]	; (8000684 <display7SEG+0x38c>)
 80005ba:	f001 fb10 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	482f      	ldr	r0, [pc, #188]	; (8000684 <display7SEG+0x38c>)
 80005c6:	f001 fb0a 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	482c      	ldr	r0, [pc, #176]	; (8000684 <display7SEG+0x38c>)
 80005d2:	f001 fb04 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 80005d6:	e081      	b.n	80006dc <display7SEG+0x3e4>
		case 8:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <display7SEG+0x388>)
 80005de:	f001 fafe 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4826      	ldr	r0, [pc, #152]	; (8000684 <display7SEG+0x38c>)
 80005ea:	f001 faf8 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4823      	ldr	r0, [pc, #140]	; (8000684 <display7SEG+0x38c>)
 80005f6:	f001 faf2 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <display7SEG+0x38c>)
 8000602:	f001 faec 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <display7SEG+0x38c>)
 800060e:	f001 fae6 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <display7SEG+0x38c>)
 800061a:	f001 fae0 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <display7SEG+0x38c>)
 8000626:	f001 fada 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 800062a:	e057      	b.n	80006dc <display7SEG+0x3e4>
		case 9:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <display7SEG+0x388>)
 8000632:	f001 fad4 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <display7SEG+0x38c>)
 800063e:	f001 face 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <display7SEG+0x38c>)
 800064a:	f001 fac8 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <display7SEG+0x38c>)
 8000656:	f001 fac2 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <display7SEG+0x38c>)
 8000662:	f001 fabc 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <display7SEG+0x38c>)
 800066e:	f001 fab6 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <display7SEG+0x38c>)
 800067a:	f001 fab0 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 800067e:	e02d      	b.n	80006dc <display7SEG+0x3e4>
 8000680:	40010c00 	.word	0x40010c00
 8000684:	40010800 	.word	0x40010800
		default:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4815      	ldr	r0, [pc, #84]	; (80006e4 <display7SEG+0x3ec>)
 800068e:	f001 faa6 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <display7SEG+0x3f0>)
 800069a:	f001 faa0 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <display7SEG+0x3f0>)
 80006a6:	f001 fa9a 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <display7SEG+0x3f0>)
 80006b2:	f001 fa94 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <display7SEG+0x3f0>)
 80006be:	f001 fa8e 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <display7SEG+0x3f0>)
 80006ca:	f001 fa88 	bl	8001bde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <display7SEG+0x3f0>)
 80006d6:	f001 fa82 	bl	8001bde <HAL_GPIO_WritePin>
			break;
 80006da:	bf00      	nop

	}
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	40010800 	.word	0x40010800

080006ec <update7SEG>:
void update7SEG(int index){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d872      	bhi.n	80007e0 <update7SEG+0xf4>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <update7SEG+0x14>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000711 	.word	0x08000711
 8000704:	08000745 	.word	0x08000745
 8000708:	08000779 	.word	0x08000779
 800070c:	080007ad 	.word	0x080007ad
    switch (index){
		  case 0:
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	4835      	ldr	r0, [pc, #212]	; (80007ec <update7SEG+0x100>)
 8000716:	f001 fa62 	bl	8001bde <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[0]);
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <update7SEG+0x104>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdea 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4830      	ldr	r0, [pc, #192]	; (80007ec <update7SEG+0x100>)
 800072a:	f001 fa58 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2102      	movs	r1, #2
 8000732:	482e      	ldr	r0, [pc, #184]	; (80007ec <update7SEG+0x100>)
 8000734:	f001 fa53 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	482b      	ldr	r0, [pc, #172]	; (80007ec <update7SEG+0x100>)
 800073e:	f001 fa4e 	bl	8001bde <HAL_GPIO_WritePin>
			  break;
 8000742:	e04e      	b.n	80007e2 <update7SEG+0xf6>
		  case 1:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	2101      	movs	r1, #1
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <update7SEG+0x100>)
 800074a:	f001 fa48 	bl	8001bde <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[1]);
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <update7SEG+0x104>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fdd0 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2102      	movs	r1, #2
 800075c:	4823      	ldr	r0, [pc, #140]	; (80007ec <update7SEG+0x100>)
 800075e:	f001 fa3e 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2104      	movs	r1, #4
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <update7SEG+0x100>)
 8000768:	f001 fa39 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2108      	movs	r1, #8
 8000770:	481e      	ldr	r0, [pc, #120]	; (80007ec <update7SEG+0x100>)
 8000772:	f001 fa34 	bl	8001bde <HAL_GPIO_WritePin>
	  		  break;
 8000776:	e034      	b.n	80007e2 <update7SEG+0xf6>
	  	  case 2:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <update7SEG+0x100>)
 800077e:	f001 fa2e 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <update7SEG+0x100>)
 8000788:	f001 fa29 	bl	8001bde <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[2]);
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <update7SEG+0x104>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fdb1 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <update7SEG+0x100>)
 800079c:	f001 fa1f 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2108      	movs	r1, #8
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <update7SEG+0x100>)
 80007a6:	f001 fa1a 	bl	8001bde <HAL_GPIO_WritePin>
	  		  break;
 80007aa:	e01a      	b.n	80007e2 <update7SEG+0xf6>
	  	  case 3:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <update7SEG+0x100>)
 80007b2:	f001 fa14 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2102      	movs	r1, #2
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <update7SEG+0x100>)
 80007bc:	f001 fa0f 	bl	8001bde <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2104      	movs	r1, #4
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <update7SEG+0x100>)
 80007c6:	f001 fa0a 	bl	8001bde <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[3]);
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <update7SEG+0x104>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd92 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2108      	movs	r1, #8
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <update7SEG+0x100>)
 80007da:	f001 fa00 	bl	8001bde <HAL_GPIO_WritePin>
	  		  break;
 80007de:	e000      	b.n	80007e2 <update7SEG+0xf6>
        default:
            break;
 80007e0:	bf00      	nop
    }
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	20000064 	.word	0x20000064

080007f4 <set7Seg4BCD>:
void set7Seg4BCD(int first_num, int second_num) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	sseg_buffer[0] = first_num / 10;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <set7Seg4BCD+0x70>)
 8000802:	fb82 1203 	smull	r1, r2, r2, r3
 8000806:	1092      	asrs	r2, r2, #2
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <set7Seg4BCD+0x74>)
 800080e:	6013      	str	r3, [r2, #0]
	sseg_buffer[1] = first_num % 10;
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <set7Seg4BCD+0x70>)
 8000814:	fb83 2301 	smull	r2, r3, r3, r1
 8000818:	109a      	asrs	r2, r3, #2
 800081a:	17cb      	asrs	r3, r1, #31
 800081c:	1ad2      	subs	r2, r2, r3
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <set7Seg4BCD+0x74>)
 800082a:	605a      	str	r2, [r3, #4]
	sseg_buffer[2] = second_num / 10;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <set7Seg4BCD+0x70>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1092      	asrs	r2, r2, #2
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <set7Seg4BCD+0x74>)
 800083c:	6093      	str	r3, [r2, #8]
	sseg_buffer[3] = second_num % 10;
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <set7Seg4BCD+0x70>)
 8000842:	fb83 2301 	smull	r2, r3, r3, r1
 8000846:	109a      	asrs	r2, r3, #2
 8000848:	17cb      	asrs	r3, r1, #31
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	1aca      	subs	r2, r1, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <set7Seg4BCD+0x74>)
 8000858:	60da      	str	r2, [r3, #12]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	66666667 	.word	0x66666667
 8000868:	20000064 	.word	0x20000064

0800086c <ledScanningRun>:
void ledScanningRun(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(timer_flag_scanning_7seg) {
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <ledScanningRun+0x38>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <ledScanningRun+0x34>
		setTimerScanning7Seg(SCANNING_DURATION);
 8000878:	2028      	movs	r0, #40	; 0x28
 800087a:	f000 fbbb 	bl	8000ff4 <setTimerScanning7Seg>
		sseg_index = (sseg_index + 1) % SSEG_AMOUNT;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <ledScanningRun+0x3c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	425a      	negs	r2, r3
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	f002 0203 	and.w	r2, r2, #3
 800088e:	bf58      	it	pl
 8000890:	4253      	negpl	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <ledScanningRun+0x3c>)
 8000894:	6013      	str	r3, [r2, #0]
		update7SEG(sseg_index);
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <ledScanningRun+0x3c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff26 	bl	80006ec <update7SEG>
	}
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	20000034 	.word	0x20000034

080008ac <reset_buffer>:
enum ButtonState buttonState[N0_OF_BUTTONS];

int buffer_value;
int button_pressed_flag[N0_OF_BUTTONS];

void reset_buffer(void) {
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
	buffer_value = 0;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <reset_buffer+0x34>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
	for(int index = 0; index < N0_OF_BUTTONS; index++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	e007      	b.n	80008ce <reset_buffer+0x22>
		button_pressed_flag[index] = 0;
 80008be:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <reset_buffer+0x38>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2100      	movs	r1, #0
 80008c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int index = 0; index < N0_OF_BUTTONS; index++) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	ddf4      	ble.n	80008be <reset_buffer+0x12>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000098 	.word	0x20000098
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <get_buffer>:
int get_buffer(void) {
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	return buffer_value;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <get_buffer+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000098 	.word	0x20000098

080008fc <incr_buffer>:
void incr_buffer(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	buffer_value = (traffic_is_modify_mode()) ? (buffer_value + 1) % BUFFER_LIMIT : 0;
 8000900:	f000 fc32 	bl	8001168 <traffic_is_modify_mode>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00d      	beq.n	8000926 <incr_buffer+0x2a>
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <incr_buffer+0x34>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <incr_buffer+0x38>)
 8000912:	fb83 1302 	smull	r1, r3, r3, r2
 8000916:	1159      	asrs	r1, r3, #5
 8000918:	17d3      	asrs	r3, r2, #31
 800091a:	1acb      	subs	r3, r1, r3
 800091c:	2164      	movs	r1, #100	; 0x64
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	e000      	b.n	8000928 <incr_buffer+0x2c>
 8000926:	2300      	movs	r3, #0
 8000928:	4a01      	ldr	r2, [pc, #4]	; (8000930 <incr_buffer+0x34>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000098 	.word	0x20000098
 8000934:	51eb851f 	.word	0x51eb851f

08000938 <init_fsm_for_input_processing>:
void init_fsm_for_input_processing(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e007      	b.n	8000954 <init_fsm_for_input_processing+0x1c>
		buttonState[button_index] = BUTTON_RELEASED;
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <init_fsm_for_input_processing+0x30>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	ddf4      	ble.n	8000944 <init_fsm_for_input_processing+0xc>
	}
	reset_buffer();
 800095a:	f7ff ffa7 	bl	80008ac <reset_buffer>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000088 	.word	0x20000088

0800096c <fsm_for_input_processing>:
void fsm_for_input_processing(unsigned char index){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	switch(buttonState[index]){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <fsm_for_input_processing+0xd0>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d03b      	beq.n	80009f8 <fsm_for_input_processing+0x8c>
 8000980:	2b02      	cmp	r3, #2
 8000982:	dc57      	bgt.n	8000a34 <fsm_for_input_processing+0xc8>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <fsm_for_input_processing+0x22>
 8000988:	2b01      	cmp	r3, #1
 800098a:	d016      	beq.n	80009ba <fsm_for_input_processing+0x4e>
		else if(index == MODIFY_BUTTON_ENCODE) {
		// Not process
		}
		break;
	}
}
 800098c:	e052      	b.n	8000a34 <fsm_for_input_processing+0xc8>
		if(is_button_pressed(index)){
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f901 	bl	8000b98 <is_button_pressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d046      	beq.n	8000a2a <fsm_for_input_processing+0xbe>
			buttonState[index] = BUTTON_PRESSED;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <fsm_for_input_processing+0xd0>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	54d1      	strb	r1, [r2, r3]
			if(index == MODIFY_BUTTON_ENCODE) {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d101      	bne.n	80009ae <fsm_for_input_processing+0x42>
				incr_buffer();
 80009aa:	f7ff ffa7 	bl	80008fc <incr_buffer>
			button_pressed_flag[index] = 1;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <fsm_for_input_processing+0xd4>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 80009b8:	e037      	b.n	8000a2a <fsm_for_input_processing+0xbe>
		if(!is_button_pressed(index)){
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f8eb 	bl	8000b98 <is_button_pressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <fsm_for_input_processing+0x66>
			buttonState[index] = BUTTON_RELEASED;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <fsm_for_input_processing+0xd0>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	54d1      	strb	r1, [r2, r3]
		break;
 80009d0:	e02d      	b.n	8000a2e <fsm_for_input_processing+0xc2>
			if(is_button_pressed_1s(index)){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f8f9 	bl	8000bcc <is_button_pressed_1s>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d026      	beq.n	8000a2e <fsm_for_input_processing+0xc2>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <fsm_for_input_processing+0xd0>)
 80009e4:	2102      	movs	r1, #2
 80009e6:	54d1      	strb	r1, [r2, r3]
				if(index == MODIFY_BUTTON_ENCODE) setTimerIncHoldButton(INC_HOLD_DURATION);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d11f      	bne.n	8000a2e <fsm_for_input_processing+0xc2>
 80009ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009f2:	f000 fac7 	bl	8000f84 <setTimerIncHoldButton>
		break;
 80009f6:	e01a      	b.n	8000a2e <fsm_for_input_processing+0xc2>
		if(!is_button_pressed(index)){
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f8cc 	bl	8000b98 <is_button_pressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <fsm_for_input_processing+0xa2>
			buttonState[index] = BUTTON_RELEASED;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <fsm_for_input_processing+0xd0>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	54d1      	strb	r1, [r2, r3]
		if(index == MODIFY_BUTTON_ENCODE) {
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10e      	bne.n	8000a32 <fsm_for_input_processing+0xc6>
			if(timer_flag_inc_hold) {
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <fsm_for_input_processing+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00a      	beq.n	8000a32 <fsm_for_input_processing+0xc6>
				setTimerIncHoldButton(INC_HOLD_DURATION);
 8000a1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a20:	f000 fab0 	bl	8000f84 <setTimerIncHoldButton>
				incr_buffer();
 8000a24:	f7ff ff6a 	bl	80008fc <incr_buffer>
		break;
 8000a28:	e003      	b.n	8000a32 <fsm_for_input_processing+0xc6>
		break;
 8000a2a:	bf00      	nop
 8000a2c:	e002      	b.n	8000a34 <fsm_for_input_processing+0xc8>
		break;
 8000a2e:	bf00      	nop
 8000a30:	e000      	b.n	8000a34 <fsm_for_input_processing+0xc8>
		break;
 8000a32:	bf00      	nop
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	20000058 	.word	0x20000058

08000a48 <is_button_hold>:
int is_button_hold(unsigned char index) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	return (buttonState[index] == BUTTON_PRESSED_MORE_THAN_1_SECOND);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <is_button_hold+0x24>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	bf0c      	ite	eq
 8000a5c:	2301      	moveq	r3, #1
 8000a5e:	2300      	movne	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000088 	.word	0x20000088

08000a70 <is_button_state_press>:
// To: Clear flag when button is pressed
char is_button_state_press(unsigned char index) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	int temp = button_pressed_flag[index];
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <is_button_state_press+0x2c>)
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	60fb      	str	r3, [r7, #12]
	button_pressed_flag[index] = 0;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <is_button_state_press+0x2c>)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return temp;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	b2db      	uxtb	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	2000008c 	.word	0x2000008c

08000aa0 <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void){
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e061      	b.n	8000b70 <button_reading+0xd0>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4933      	ldr	r1, [pc, #204]	; (8000b80 <button_reading+0xe0>)
 8000ab2:	5c89      	ldrb	r1, [r1, r2]
 8000ab4:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <button_reading+0xe4>)
 8000ab6:	54d1      	strb	r1, [r2, r3]
		switch(i) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d01a      	beq.n	8000af4 <button_reading+0x54>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	dc22      	bgt.n	8000b08 <button_reading+0x68>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <button_reading+0x2c>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d00a      	beq.n	8000ae0 <button_reading+0x40>
 8000aca:	e01d      	b.n	8000b08 <button_reading+0x68>
		case 0:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000acc:	79fc      	ldrb	r4, [r7, #7]
 8000ace:	2110      	movs	r1, #16
 8000ad0:	482d      	ldr	r0, [pc, #180]	; (8000b88 <button_reading+0xe8>)
 8000ad2:	f001 f86d 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <button_reading+0xe0>)
 8000adc:	551a      	strb	r2, [r3, r4]
			break;
 8000ade:	e013      	b.n	8000b08 <button_reading+0x68>
		case 1:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000ae0:	79fc      	ldrb	r4, [r7, #7]
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <button_reading+0xe8>)
 8000ae6:	f001 f863 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <button_reading+0xe0>)
 8000af0:	551a      	strb	r2, [r3, r4]
			break;
 8000af2:	e009      	b.n	8000b08 <button_reading+0x68>
		case 2:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000af4:	79fc      	ldrb	r4, [r7, #7]
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4823      	ldr	r0, [pc, #140]	; (8000b88 <button_reading+0xe8>)
 8000afa:	f001 f859 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <button_reading+0xe0>)
 8000b04:	551a      	strb	r2, [r3, r4]
			break;
 8000b06:	bf00      	nop
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <button_reading+0xe0>)
 8000b0c:	5cd2      	ldrb	r2, [r2, r3]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	491c      	ldr	r1, [pc, #112]	; (8000b84 <button_reading+0xe4>)
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d105      	bne.n	8000b24 <button_reading+0x84>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4918      	ldr	r1, [pc, #96]	; (8000b80 <button_reading+0xe0>)
 8000b1e:	5c89      	ldrb	r1, [r1, r2]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <button_reading+0xec>)
 8000b22:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <button_reading+0xec>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d114      	bne.n	8000b58 <button_reading+0xb8>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <button_reading+0xf0>)
 8000b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b36:	2b63      	cmp	r3, #99	; 0x63
 8000b38:	d809      	bhi.n	8000b4e <button_reading+0xae>
					counterForButtonPress1s[i]++;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <button_reading+0xf0>)
 8000b3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b42:	3201      	adds	r2, #1
 8000b44:	b291      	uxth	r1, r2
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <button_reading+0xf0>)
 8000b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b4c:	e00d      	b.n	8000b6a <button_reading+0xca>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <button_reading+0xf4>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	54d1      	strb	r1, [r2, r3]
 8000b56:	e008      	b.n	8000b6a <button_reading+0xca>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <button_reading+0xf0>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <button_reading+0xf4>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d99a      	bls.n	8000aac <button_reading+0xc>
			}
	}
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	2000003c 	.word	0x2000003c
 8000b84:	20000040 	.word	0x20000040
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	20000038 	.word	0x20000038
 8000b90:	20000048 	.word	0x20000048
 8000b94:	20000044 	.word	0x20000044

08000b98 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <is_button_pressed+0x14>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e007      	b.n	8000bbc <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <is_button_pressed+0x30>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000038 	.word	0x20000038

08000bcc <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d901      	bls.n	8000be0 <is_button_pressed_1s+0x14>
 8000bdc:	23ff      	movs	r3, #255	; 0xff
 8000bde:	e007      	b.n	8000bf0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <is_button_pressed_1s+0x30>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	bf0c      	ite	eq
 8000bea:	2301      	moveq	r3, #1
 8000bec:	2300      	movne	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000044 	.word	0x20000044

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 fce9 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f823 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 f8a9 	bl	8000d64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c12:	f000 f85b 	bl	8000ccc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <main+0x50>)
 8000c18:	f001 fc3e 	bl	8002498 <HAL_TIM_Base_Start_IT>
  init_timer();
 8000c1c:	f000 fa06 	bl	800102c <init_timer>
  init_fsm_for_input_processing();
 8000c20:	f7ff fe8a 	bl	8000938 <init_fsm_for_input_processing>
  init_fsm_traffic_mode();
 8000c24:	f000 fa76 	bl	8001114 <init_fsm_traffic_mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	e007      	b.n	8000c3e <main+0x3e>
		  fsm_for_input_processing(button_index);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe9a 	bl	800096c <fsm_for_input_processing>
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	ddf4      	ble.n	8000c2e <main+0x2e>
	  }
	  ledScanningRun();
 8000c44:	f7ff fe12 	bl	800086c <ledScanningRun>
	  fsm_traffic_light_mode();
 8000c48:	f000 fbc4 	bl	80013d4 <fsm_traffic_light_mode>
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000c4c:	e7ec      	b.n	8000c28 <main+0x28>
 8000c4e:	bf00      	nop
 8000c50:	200000a0 	.word	0x200000a0

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 ffd4 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 ffd8 	bl	8001c40 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c96:	f000 f8c5 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fa44 	bl	8002140 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f8b1 	bl	8000e24 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3740      	adds	r7, #64	; 0x40
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cf2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d00:	2209      	movs	r2, #9
 8000d02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d12:	f001 fb71 	bl	80023f8 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d1c:	f000 f882 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d2e:	f001 fd07 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d38:	f000 f874 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_TIM2_Init+0x94>)
 8000d4a:	f001 fed3 	bl	8002af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f000 f866 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200000a0 	.word	0x200000a0

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a20      	ldr	r2, [pc, #128]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_GPIO_Init+0xb4>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_2_Pin|YEL_2_Pin|GRE_2_Pin|RED_1_Pin
 8000da8:	2200      	movs	r2, #0
 8000daa:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 8000dae:	481b      	ldr	r0, [pc, #108]	; (8000e1c <MX_GPIO_Init+0xb8>)
 8000db0:	f000 ff15 	bl	8001bde <HAL_GPIO_WritePin>
                          |YEL_1_Pin|GRE_1_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSEG_0_Pin|SSEG_1_Pin|SSEG_2_Pin|SSEG_3_Pin
 8000db4:	2200      	movs	r2, #0
 8000db6:	218f      	movs	r1, #143	; 0x8f
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_GPIO_Init+0xbc>)
 8000dba:	f000 ff10 	bl	8001bde <HAL_GPIO_WritePin>
                          |S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_2_Pin YEL_2_Pin GRE_2_Pin RED_1_Pin
                           YEL_1_Pin GRE_1_Pin S2_Pin S3_Pin
                           S4_Pin S5_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = RED_2_Pin|YEL_2_Pin|GRE_2_Pin|RED_1_Pin
 8000dbe:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8000dc2:	60bb      	str	r3, [r7, #8]
                          |YEL_1_Pin|GRE_1_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4811      	ldr	r0, [pc, #68]	; (8000e1c <MX_GPIO_Init+0xb8>)
 8000dd8:	f000 fd70 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_0_Pin SSEG_1_Pin SSEG_2_Pin SSEG_3_Pin
                           S1_Pin */
  GPIO_InitStruct.Pin = SSEG_0_Pin|SSEG_1_Pin|SSEG_2_Pin|SSEG_3_Pin
 8000ddc:	238f      	movs	r3, #143	; 0x8f
 8000dde:	60bb      	str	r3, [r7, #8]
                          |S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <MX_GPIO_Init+0xbc>)
 8000df4:	f000 fd62 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000df8:	2370      	movs	r3, #112	; 0x70
 8000dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_GPIO_Init+0xbc>)
 8000e0c:	f000 fd56 	bl	80018bc <HAL_GPIO_Init>

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_MspInit+0x60>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_MspInit+0x60>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d113      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	201c      	movs	r0, #28
 8000ec4:	f000 fcc3 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec8:	201c      	movs	r0, #28
 8000eca:	f000 fcdc 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f22:	f000 fba1 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM2_IRQHandler+0x10>)
 8000f32:	f001 fafd 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000a0 	.word	0x200000a0

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <setTimerNormalMode>:
#include "traffic_light_mode.h"
#include "input_reading.h"
#include "defination.h"
#include "stm32f1xx_hal_tim.h"

void setTimerNormalMode(int num) {		/* Always SECOND_UNIT*/
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	timer_counter_normal_mode = num / TIMER_CYCLE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <setTimerNormalMode+0x2c>)
 8000f58:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5c:	1092      	asrs	r2, r2, #2
 8000f5e:	17db      	asrs	r3, r3, #31
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <setTimerNormalMode+0x30>)
 8000f64:	6013      	str	r3, [r2, #0]
	timer_flag_normal_mode = 0;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <setTimerNormalMode+0x34>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	66666667 	.word	0x66666667
 8000f7c:	20000060 	.word	0x20000060
 8000f80:	20000084 	.word	0x20000084

08000f84 <setTimerIncHoldButton>:
void setTimerIncHoldButton(int num) {	/* Always INC_HOLD_DURATION*/
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	timer_counter_inc_hold = num / TIMER_CYCLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <setTimerIncHoldButton+0x2c>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <setTimerIncHoldButton+0x30>)
 8000f9c:	6013      	str	r3, [r2, #0]
	timer_flag_inc_hold = 0;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <setTimerIncHoldButton+0x34>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	66666667 	.word	0x66666667
 8000fb4:	20000050 	.word	0x20000050
 8000fb8:	20000058 	.word	0x20000058

08000fbc <setTimerBlinkLed>:
void setTimerBlinkLed(int num) {		/* Always BLINK_LED_COUNTER*/
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	timer_counter_blink_led = num / TIMER_CYCLE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <setTimerBlinkLed+0x2c>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <setTimerBlinkLed+0x30>)
 8000fd4:	6013      	str	r3, [r2, #0]
	timer_flag_blink_led = 0;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <setTimerBlinkLed+0x34>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	66666667 	.word	0x66666667
 8000fec:	2000005c 	.word	0x2000005c
 8000ff0:	20000078 	.word	0x20000078

08000ff4 <setTimerScanning7Seg>:
void setTimerScanning7Seg(int num) {	/* Always SCANNING_DURATION*/
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timer_counter_scanning_7seg = num / TIMER_CYCLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <setTimerScanning7Seg+0x2c>)
 8001000:	fb82 1203 	smull	r1, r2, r2, r3
 8001004:	1092      	asrs	r2, r2, #2
 8001006:	17db      	asrs	r3, r3, #31
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <setTimerScanning7Seg+0x30>)
 800100c:	6013      	str	r3, [r2, #0]
	timer_flag_scanning_7seg = 0;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <setTimerScanning7Seg+0x34>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	66666667 	.word	0x66666667
 8001024:	20000080 	.word	0x20000080
 8001028:	2000007c 	.word	0x2000007c

0800102c <init_timer>:
void init_timer(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	setTimerNormalMode(SECOND_UNIT);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f7ff ff8a 	bl	8000f4c <setTimerNormalMode>
	setTimerIncHoldButton(INC_HOLD_DURATION);
 8001038:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800103c:	f7ff ffa2 	bl	8000f84 <setTimerIncHoldButton>
	setTimerBlinkLed(BLINK_LED_COUNTER);
 8001040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001044:	f7ff ffba 	bl	8000fbc <setTimerBlinkLed>
	setTimerScanning7Seg(SCANNING_DURATION);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f7ff ffd3 	bl	8000ff4 <setTimerScanning7Seg>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8001066:	f7ff fd1b 	bl	8000aa0 <button_reading>
	}
	if(traffic_is_normal_mode()) {
 800106a:	f000 f895 	bl	8001198 <traffic_is_normal_mode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <HAL_TIM_PeriodElapsedCallback+0x3a>
		timer_counter_normal_mode--;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800107c:	6013      	str	r3, [r2, #0]
		if(timer_counter_normal_mode == 0) {
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d126      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>
			timer_flag_normal_mode = 1;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e022      	b.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>
		}
	}
	else if(traffic_is_modify_mode()) {
 800108e:	f000 f86b 	bl	8001168 <traffic_is_modify_mode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01d      	beq.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>
		/* Blinking led */
		timer_counter_blink_led--;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010a0:	6013      	str	r3, [r2, #0]
		if(timer_counter_blink_led == 0) {
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0x5c>
			timer_flag_blink_led = 1;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
		}
		/* Button */
		if(is_button_hold(MODIFY_BUTTON_ENCODE)) {
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fcc9 	bl	8000a48 <is_button_hold>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>
			timer_counter_inc_hold--;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010c4:	6013      	str	r3, [r2, #0]
			if(timer_counter_inc_hold == 0) {
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x80>
				timer_flag_inc_hold = 1;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
			}
		}
	}
	timer_counter_scanning_7seg--;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010dc:	6013      	str	r3, [r2, #0]
	if(timer_counter_scanning_7seg == 0) {
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x98>
		timer_flag_scanning_7seg = 1;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
	}

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000060 	.word	0x20000060
 80010f8:	20000084 	.word	0x20000084
 80010fc:	2000005c 	.word	0x2000005c
 8001100:	20000078 	.word	0x20000078
 8001104:	20000050 	.word	0x20000050
 8001108:	20000058 	.word	0x20000058
 800110c:	20000080 	.word	0x20000080
 8001110:	2000007c 	.word	0x2000007c

08001114 <init_fsm_traffic_mode>:
int secondWayCounter;
int redCountDown = RED_LIGHT_LIMIT;
int yelCountDown = YELLOW_LIGHT_LIMIT;
int greCountDown = GREEN_LIGHT_LIMIT;

void init_fsm_traffic_mode(void) {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	trafficLightMode = INIT_MODE;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <init_fsm_traffic_mode+0x14>)
 800111a:	2205      	movs	r2, #5
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000009c 	.word	0x2000009c

0800112c <reset_fsm_normal_mode>:
void reset_fsm_normal_mode(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	normalModeState = RED_GREEN;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <reset_fsm_normal_mode+0x28>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	setTimerNormalMode(SECOND_UNIT);
 8001136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113a:	f7ff ff07 	bl	8000f4c <setTimerNormalMode>
	firstWayCounter = redCountDown;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <reset_fsm_normal_mode+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a06      	ldr	r2, [pc, #24]	; (800115c <reset_fsm_normal_mode+0x30>)
 8001144:	6013      	str	r3, [r2, #0]
	secondWayCounter = greCountDown;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <reset_fsm_normal_mode+0x34>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <reset_fsm_normal_mode+0x38>)
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000004e 	.word	0x2000004e
 8001158:	20000004 	.word	0x20000004
 800115c:	200000e8 	.word	0x200000e8
 8001160:	2000000c 	.word	0x2000000c
 8001164:	200000ec 	.word	0x200000ec

08001168 <traffic_is_modify_mode>:
int traffic_is_modify_mode(void) {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	return (trafficLightMode == MODIFY_RED_MODE || trafficLightMode == MODIFY_YELLOW_MODE || trafficLightMode == MODIFY_GREEN_MODE);
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <traffic_is_modify_mode+0x2c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d007      	beq.n	8001184 <traffic_is_modify_mode+0x1c>
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <traffic_is_modify_mode+0x2c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d003      	beq.n	8001184 <traffic_is_modify_mode+0x1c>
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <traffic_is_modify_mode+0x2c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d101      	bne.n	8001188 <traffic_is_modify_mode+0x20>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <traffic_is_modify_mode+0x22>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000009c 	.word	0x2000009c

08001198 <traffic_is_normal_mode>:
int traffic_is_normal_mode(void) {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return (trafficLightMode == NORMAL_MODE);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <traffic_is_normal_mode+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <fsm_normal_mode>:

void fsm_normal_mode(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if(timer_flag_normal_mode) {
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <fsm_normal_mode+0x10c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00d      	beq.n	80011e0 <fsm_normal_mode+0x28>
		setTimerNormalMode(SECOND_UNIT);
 80011c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c8:	f7ff fec0 	bl	8000f4c <setTimerNormalMode>
		firstWayCounter--;
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <fsm_normal_mode+0x110>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <fsm_normal_mode+0x110>)
 80011d4:	6013      	str	r3, [r2, #0]
		secondWayCounter--;
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <fsm_normal_mode+0x114>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <fsm_normal_mode+0x114>)
 80011de:	6013      	str	r3, [r2, #0]
	}
	switch(normalModeState) {
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <fsm_normal_mode+0x118>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d862      	bhi.n	80012ae <fsm_normal_mode+0xf6>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <fsm_normal_mode+0x38>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001225 	.word	0x08001225
 80011f8:	08001251 	.word	0x08001251
 80011fc:	08001275 	.word	0x08001275
	case RED_GREEN:
		if(secondWayCounter <= -1) {
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <fsm_normal_mode+0x114>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	da4b      	bge.n	80012a0 <fsm_normal_mode+0xe8>
			normalModeState = RED_YELLOW;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <fsm_normal_mode+0x118>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
			trafficLightOn(RED1);
 800120e:	2000      	movs	r0, #0
 8001210:	f7fe ff9c 	bl	800014c <trafficLightOn>
			trafficLightOn(YELLOW2);
 8001214:	2005      	movs	r0, #5
 8001216:	f7fe ff99 	bl	800014c <trafficLightOn>
			secondWayCounter = yelCountDown;
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <fsm_normal_mode+0x11c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <fsm_normal_mode+0x114>)
 8001220:	6013      	str	r3, [r2, #0]
		}
		break;
 8001222:	e03d      	b.n	80012a0 <fsm_normal_mode+0xe8>
	case RED_YELLOW:
		if(secondWayCounter <= -1) {
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <fsm_normal_mode+0x114>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da3b      	bge.n	80012a4 <fsm_normal_mode+0xec>
			normalModeState = GREEN_RED;
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <fsm_normal_mode+0x118>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
			trafficLightOn(GREEN1);
 8001232:	2001      	movs	r0, #1
 8001234:	f7fe ff8a 	bl	800014c <trafficLightOn>
			trafficLightOn(RED2);
 8001238:	2003      	movs	r0, #3
 800123a:	f7fe ff87 	bl	800014c <trafficLightOn>
			firstWayCounter = greCountDown;
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <fsm_normal_mode+0x120>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <fsm_normal_mode+0x110>)
 8001244:	6013      	str	r3, [r2, #0]
			secondWayCounter = redCountDown;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <fsm_normal_mode+0x124>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <fsm_normal_mode+0x114>)
 800124c:	6013      	str	r3, [r2, #0]
		}
		break;
 800124e:	e029      	b.n	80012a4 <fsm_normal_mode+0xec>
	case GREEN_RED:
		if(firstWayCounter <= -1) {
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <fsm_normal_mode+0x110>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	da27      	bge.n	80012a8 <fsm_normal_mode+0xf0>
			normalModeState = YELLOW_RED;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <fsm_normal_mode+0x118>)
 800125a:	2203      	movs	r2, #3
 800125c:	701a      	strb	r2, [r3, #0]
			trafficLightOn(YELLOW1);
 800125e:	2002      	movs	r0, #2
 8001260:	f7fe ff74 	bl	800014c <trafficLightOn>
			trafficLightOn(RED2);
 8001264:	2003      	movs	r0, #3
 8001266:	f7fe ff71 	bl	800014c <trafficLightOn>
			firstWayCounter = yelCountDown;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <fsm_normal_mode+0x11c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <fsm_normal_mode+0x110>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		break;
 8001272:	e019      	b.n	80012a8 <fsm_normal_mode+0xf0>
	case YELLOW_RED:
		if(firstWayCounter <= -1) {
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <fsm_normal_mode+0x110>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da17      	bge.n	80012ac <fsm_normal_mode+0xf4>
			normalModeState = RED_GREEN;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <fsm_normal_mode+0x118>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			trafficLightOn(RED1);
 8001282:	2000      	movs	r0, #0
 8001284:	f7fe ff62 	bl	800014c <trafficLightOn>
			trafficLightOn(GREEN2);
 8001288:	2004      	movs	r0, #4
 800128a:	f7fe ff5f 	bl	800014c <trafficLightOn>
			firstWayCounter = redCountDown;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <fsm_normal_mode+0x124>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <fsm_normal_mode+0x110>)
 8001294:	6013      	str	r3, [r2, #0]
			secondWayCounter = greCountDown;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <fsm_normal_mode+0x120>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <fsm_normal_mode+0x114>)
 800129c:	6013      	str	r3, [r2, #0]
		}
		break;
 800129e:	e005      	b.n	80012ac <fsm_normal_mode+0xf4>
		break;
 80012a0:	bf00      	nop
 80012a2:	e004      	b.n	80012ae <fsm_normal_mode+0xf6>
		break;
 80012a4:	bf00      	nop
 80012a6:	e002      	b.n	80012ae <fsm_normal_mode+0xf6>
		break;
 80012a8:	bf00      	nop
 80012aa:	e000      	b.n	80012ae <fsm_normal_mode+0xf6>
		break;
 80012ac:	bf00      	nop
	}
	set7Seg4BCD(firstWayCounter, secondWayCounter);
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <fsm_normal_mode+0x110>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <fsm_normal_mode+0x114>)
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa9b 	bl	80007f4 <set7Seg4BCD>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000084 	.word	0x20000084
 80012c8:	200000e8 	.word	0x200000e8
 80012cc:	200000ec 	.word	0x200000ec
 80012d0:	2000004e 	.word	0x2000004e
 80012d4:	20000008 	.word	0x20000008
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000004 	.word	0x20000004

080012e0 <fsm_modify_mode>:
void fsm_modify_mode(enum ColorDecode colorDecode) {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	if(colorDecode == RED_LED) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10b      	bne.n	8001308 <fsm_modify_mode+0x28>
		if(is_button_state_press(SET_BUTTON_ENCODE)) {
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff fbbd 	bl	8000a70 <is_button_state_press>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d022      	beq.n	8001342 <fsm_modify_mode+0x62>
			redCountDown = get_buffer();
 80012fc:	f7ff faf4 	bl	80008e8 <get_buffer>
 8001300:	4603      	mov	r3, r0
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <fsm_modify_mode+0x98>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01c      	b.n	8001342 <fsm_modify_mode+0x62>
		}
	}
	else if (colorDecode == YELLOW_LED) {
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d10b      	bne.n	8001326 <fsm_modify_mode+0x46>
		if(is_button_state_press(SET_BUTTON_ENCODE)) {
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff fbae 	bl	8000a70 <is_button_state_press>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d013      	beq.n	8001342 <fsm_modify_mode+0x62>
			yelCountDown = get_buffer();
 800131a:	f7ff fae5 	bl	80008e8 <get_buffer>
 800131e:	4603      	mov	r3, r0
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <fsm_modify_mode+0x9c>)
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e00d      	b.n	8001342 <fsm_modify_mode+0x62>
		}
	}
	else if (colorDecode == GREEN_LED) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10a      	bne.n	8001342 <fsm_modify_mode+0x62>
		if(is_button_state_press(SET_BUTTON_ENCODE)) {
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff fb9f 	bl	8000a70 <is_button_state_press>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <fsm_modify_mode+0x62>
			greCountDown = get_buffer();
 8001338:	f7ff fad6 	bl	80008e8 <get_buffer>
 800133c:	4603      	mov	r3, r0
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <fsm_modify_mode+0xa0>)
 8001340:	6013      	str	r3, [r2, #0]
		}
	}

	if(timer_flag_blink_led) {
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <fsm_modify_mode+0xa4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <fsm_modify_mode+0x7a>
		setTimerBlinkLed(BLINK_LED_COUNTER);
 800134a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134e:	f7ff fe35 	bl	8000fbc <setTimerBlinkLed>
		blinkLed(colorDecode);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff9f 	bl	8000298 <blinkLed>
	}
	set7Seg4BCD(trafficLightMode, get_buffer());
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <fsm_modify_mode+0xa8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461c      	mov	r4, r3
 8001360:	f7ff fac2 	bl	80008e8 <get_buffer>
 8001364:	4603      	mov	r3, r0
 8001366:	4619      	mov	r1, r3
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fa43 	bl	80007f4 <set7Seg4BCD>
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	20000004 	.word	0x20000004
 800137c:	20000008 	.word	0x20000008
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20000078 	.word	0x20000078
 8001388:	2000009c 	.word	0x2000009c

0800138c <reset_fsm_modify_mode>:
void reset_fsm_modify_mode(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	setTimerBlinkLed(BLINK_LED_COUNTER);
 8001390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001394:	f7ff fe12 	bl	8000fbc <setTimerBlinkLed>
	reset_buffer();
 8001398:	f7ff fa88 	bl	80008ac <reset_buffer>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <is_light_num_valid>:
// Return: Limitation of light number is valid
int is_light_num_valid(void) {
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return (redCountDown + 1 == yelCountDown + greCountDown + 2);
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <is_light_num_valid+0x28>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <is_light_num_valid+0x2c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <is_light_num_valid+0x30>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000004 	.word	0x20000004

080013d4 <fsm_traffic_light_mode>:
void fsm_traffic_light_mode(void) {
 80013d4:	b598      	push	{r3, r4, r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	switch(trafficLightMode) {
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	2b05      	cmp	r3, #5
 80013e0:	f200 80c8 	bhi.w	8001574 <fsm_traffic_light_mode+0x1a0>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <fsm_traffic_light_mode+0x18>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	08001447 	.word	0x08001447
 80013f0:	08001483 	.word	0x08001483
 80013f4:	080014bf 	.word	0x080014bf
 80013f8:	080014fb 	.word	0x080014fb
 80013fc:	08001405 	.word	0x08001405
 8001400:	0800154f 	.word	0x0800154f
	case INIT_MODE:
		trafficLightMode = NORMAL_MODE;
 8001404:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
		init_timer();
 800140a:	f7ff fe0f 	bl	800102c <init_timer>
		redCountDown = RED_LIGHT_LIMIT;
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <fsm_traffic_light_mode+0x1a8>)
 8001410:	2204      	movs	r2, #4
 8001412:	601a      	str	r2, [r3, #0]
		yelCountDown = YELLOW_LIGHT_LIMIT;
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <fsm_traffic_light_mode+0x1ac>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
		greCountDown = GREEN_LIGHT_LIMIT;
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <fsm_traffic_light_mode+0x1b0>)
 800141c:	2202      	movs	r2, #2
 800141e:	601a      	str	r2, [r3, #0]
		trafficLightOn(RED1);
 8001420:	2000      	movs	r0, #0
 8001422:	f7fe fe93 	bl	800014c <trafficLightOn>
		trafficLightOn(GREEN2);
 8001426:	2004      	movs	r0, #4
 8001428:	f7fe fe90 	bl	800014c <trafficLightOn>
		reset_buffer();
 800142c:	f7ff fa3e 	bl	80008ac <reset_buffer>
		reset_fsm_normal_mode();
 8001430:	f7ff fe7c 	bl	800112c <reset_fsm_normal_mode>
		set7Seg4BCD(firstWayCounter, secondWayCounter);
 8001434:	4b54      	ldr	r3, [pc, #336]	; (8001588 <fsm_traffic_light_mode+0x1b4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a54      	ldr	r2, [pc, #336]	; (800158c <fsm_traffic_light_mode+0x1b8>)
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9d8 	bl	80007f4 <set7Seg4BCD>
		break;
 8001444:	e096      	b.n	8001574 <fsm_traffic_light_mode+0x1a0>
	case NORMAL_MODE:
		fsm_normal_mode();
 8001446:	f7ff feb7 	bl	80011b8 <fsm_normal_mode>
		if(is_button_state_press(MODE_BUTTON_ENCODE)) {
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fb10 	bl	8000a70 <is_button_state_press>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8085 	beq.w	8001562 <fsm_traffic_light_mode+0x18e>
			trafficLightMode = MODIFY_RED_MODE;
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 800145a:	2202      	movs	r2, #2
 800145c:	701a      	strb	r2, [r3, #0]
			reset_fsm_normal_mode();
 800145e:	f7ff fe65 	bl	800112c <reset_fsm_normal_mode>
			setUpBlinkLed(RED_LED);
 8001462:	2000      	movs	r0, #0
 8001464:	f7fe fef0 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 8001468:	f7ff fa20 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461c      	mov	r4, r3
 8001472:	f7ff fa39 	bl	80008e8 <get_buffer>
 8001476:	4603      	mov	r3, r0
 8001478:	4619      	mov	r1, r3
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff f9ba 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 8001480:	e06f      	b.n	8001562 <fsm_traffic_light_mode+0x18e>
	case MODIFY_RED_MODE:
		fsm_modify_mode(RED_LED);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff ff2c 	bl	80012e0 <fsm_modify_mode>
		if(is_button_state_press(MODE_BUTTON_ENCODE)) {
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff faf1 	bl	8000a70 <is_button_state_press>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d068      	beq.n	8001566 <fsm_traffic_light_mode+0x192>
			trafficLightMode = MODIFY_YELLOW_MODE;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 8001496:	2203      	movs	r2, #3
 8001498:	701a      	strb	r2, [r3, #0]
			reset_fsm_modify_mode();
 800149a:	f7ff ff77 	bl	800138c <reset_fsm_modify_mode>
			setUpBlinkLed(YELLOW_LED);
 800149e:	2002      	movs	r0, #2
 80014a0:	f7fe fed2 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 80014a4:	f7ff fa02 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461c      	mov	r4, r3
 80014ae:	f7ff fa1b 	bl	80008e8 <get_buffer>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff f99c 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 80014bc:	e053      	b.n	8001566 <fsm_traffic_light_mode+0x192>
	case MODIFY_YELLOW_MODE:
		fsm_modify_mode(YELLOW_LED);
 80014be:	2002      	movs	r0, #2
 80014c0:	f7ff ff0e 	bl	80012e0 <fsm_modify_mode>
		if(is_button_state_press(MODE_BUTTON_ENCODE)) {
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fad3 	bl	8000a70 <is_button_state_press>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d04c      	beq.n	800156a <fsm_traffic_light_mode+0x196>
			trafficLightMode = MODIFY_GREEN_MODE;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	701a      	strb	r2, [r3, #0]
			reset_fsm_modify_mode();
 80014d6:	f7ff ff59 	bl	800138c <reset_fsm_modify_mode>
			setUpBlinkLed(GREEN_LED);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7fe feb4 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 80014e0:	f7ff f9e4 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461c      	mov	r4, r3
 80014ea:	f7ff f9fd 	bl	80008e8 <get_buffer>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff f97e 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 80014f8:	e037      	b.n	800156a <fsm_traffic_light_mode+0x196>
	case MODIFY_GREEN_MODE:
		fsm_modify_mode(GREEN_LED);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fef0 	bl	80012e0 <fsm_modify_mode>
		if(is_button_state_press(MODE_BUTTON_ENCODE)) {
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fab5 	bl	8000a70 <is_button_state_press>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d030      	beq.n	800156e <fsm_traffic_light_mode+0x19a>
			if(is_light_num_valid()) {
 800150c:	f7ff ff48 	bl	80013a0 <is_light_num_valid>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <fsm_traffic_light_mode+0x16a>
				trafficLightMode = NORMAL_MODE;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
				trafficLightOn(RED1);
 800151c:	2000      	movs	r0, #0
 800151e:	f7fe fe15 	bl	800014c <trafficLightOn>
				trafficLightOn(GREEN2);
 8001522:	2004      	movs	r0, #4
 8001524:	f7fe fe12 	bl	800014c <trafficLightOn>
				reset_fsm_normal_mode();
 8001528:	f7ff fe00 	bl	800112c <reset_fsm_normal_mode>
				set7Seg4BCD(firstWayCounter, secondWayCounter);
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <fsm_traffic_light_mode+0x1b4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <fsm_traffic_light_mode+0x1b8>)
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f95c 	bl	80007f4 <set7Seg4BCD>
				trafficLightMode = ERROR_MODE;
				set7Seg4BCD(ERROR_7SEG_DISPLAY_1, ERROR_7SEG_DISPLAY_0);
			}

		}
		break;
 800153c:	e017      	b.n	800156e <fsm_traffic_light_mode+0x19a>
				trafficLightMode = ERROR_MODE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 8001540:	2206      	movs	r2, #6
 8001542:	701a      	strb	r2, [r3, #0]
				set7Seg4BCD(ERROR_7SEG_DISPLAY_1, ERROR_7SEG_DISPLAY_0);
 8001544:	2163      	movs	r1, #99	; 0x63
 8001546:	2063      	movs	r0, #99	; 0x63
 8001548:	f7ff f954 	bl	80007f4 <set7Seg4BCD>
		break;
 800154c:	e00f      	b.n	800156e <fsm_traffic_light_mode+0x19a>
	case ERROR_MODE:
		if(is_button_state_press(MODE_BUTTON_ENCODE)) {
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fa8e 	bl	8000a70 <is_button_state_press>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <fsm_traffic_light_mode+0x19e>
			trafficLightMode = INIT_MODE;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <fsm_traffic_light_mode+0x1a4>)
 800155c:	2205      	movs	r2, #5
 800155e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001560:	e007      	b.n	8001572 <fsm_traffic_light_mode+0x19e>
		break;
 8001562:	bf00      	nop
 8001564:	e006      	b.n	8001574 <fsm_traffic_light_mode+0x1a0>
		break;
 8001566:	bf00      	nop
 8001568:	e004      	b.n	8001574 <fsm_traffic_light_mode+0x1a0>
		break;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <fsm_traffic_light_mode+0x1a0>
		break;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <fsm_traffic_light_mode+0x1a0>
		break;
 8001572:	bf00      	nop
	}
}
 8001574:	bf00      	nop
 8001576:	bd98      	pop	{r3, r4, r7, pc}
 8001578:	2000009c 	.word	0x2000009c
 800157c:	20000004 	.word	0x20000004
 8001580:	20000008 	.word	0x20000008
 8001584:	2000000c 	.word	0x2000000c
 8001588:	200000e8 	.word	0x200000e8
 800158c:	200000ec 	.word	0x200000ec

08001590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff fcd6 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001596:	490c      	ldr	r1, [pc, #48]	; (80015c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015ac:	4c09      	ldr	r4, [pc, #36]	; (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f001 fb05 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff fb1f 	bl	8000c00 <main>
  bx lr
 80015c2:	4770      	bx	lr
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80015cc:	08002c64 	.word	0x08002c64
  ldr r2, =_sbss
 80015d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80015d4:	200000f4 	.word	0x200000f4

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x28>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f923 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fc1a 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f93b 	bl	80018a2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f903 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000014 	.word	0x20000014
 8001664:	20000010 	.word	0x20000010

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000014 	.word	0x20000014
 8001688:	200000f0 	.word	0x200000f0

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200000f0 	.word	0x200000f0

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4906      	ldr	r1, [pc, #24]	; (8001738 <__NVIC_EnableIRQ+0x34>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff90 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff2d 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff42 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff90 	bl	8001790 <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5f 	bl	800173c <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff35 	bl	8001704 <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e148      	b.n	8001b62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8137 	bne.w	8001b5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4aa3      	ldr	r2, [pc, #652]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4aa1      	ldr	r2, [pc, #644]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4aa1      	ldr	r2, [pc, #644]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a9d      	ldr	r2, [pc, #628]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a9b      	ldr	r2, [pc, #620]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_GPIO_Init+0x2d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a99      	ldr	r2, [pc, #612]	; (8001b90 <HAL_GPIO_Init+0x2d4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a82      	ldr	r2, [pc, #520]	; (8001b94 <HAL_GPIO_Init+0x2d8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8090 	beq.w	8001b5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1dc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1d8>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aae:	493b      	ldr	r1, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4933      	ldr	r1, [pc, #204]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4929      	ldr	r1, [pc, #164]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	491f      	ldr	r1, [pc, #124]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4919      	ldr	r1, [pc, #100]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4915      	ldr	r1, [pc, #84]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f aeaf 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e001      	b.n	8001bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]
 8001bea:	4613      	mov	r3, r2
 8001bec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bee:	787b      	ldrb	r3, [r7, #1]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	041a      	lsls	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	400b      	ands	r3, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e26c      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d06c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x12c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d168      	bne.n	8001d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e246      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x76>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a7f      	ldr	r2, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b78      	ldr	r3, [pc, #480]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a77      	ldr	r2, [pc, #476]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xbc>
 8001ce2:	4b72      	ldr	r3, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a71      	ldr	r2, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fcb6 	bl	800168c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fcb2 	bl	800168c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1fa      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe4>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fca2 	bl	800168c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc9e 	bl	800168c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1e6      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x10c>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1ba      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4939      	ldr	r1, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fc57 	bl	800168c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fc53 	bl	800168c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e19b      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4927      	ldr	r1, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc36 	bl	800168c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fc32 	bl	800168c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e17a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fc16 	bl	800168c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc12 	bl	800168c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e15a      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 fa9a 	bl	80023bc <RCC_Delay>
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fbfc 	bl	800168c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbf8 	bl	800168c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e140      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	42420000 	.word	0x42420000
 8001eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e9      	bne.n	8001e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a6 	beq.w	800201e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b97      	ldr	r3, [pc, #604]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a93      	ldr	r2, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a8a      	ldr	r2, [pc, #552]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fbb9 	bl	800168c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff fbb5 	bl	800168c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0fd      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f44:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e02d      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x356>
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a66      	ldr	r2, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a63      	ldr	r2, [pc, #396]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb69 	bl	800168c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb65 	bl	800168c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0ab      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x37e>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb53 	bl	800168c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fb4f 	bl	800168c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e095      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8081 	beq.w	800212a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d061      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d146      	bne.n	80020ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fb23 	bl	800168c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fb1f 	bl	800168c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e067      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	492d      	ldr	r1, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a19      	ldr	r1, [r3, #32]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	430b      	orrs	r3, r1
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff faf3 	bl	800168c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff faef 	bl	800168c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e037      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
 80020c8:	e02f      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0x4fc>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fadc 	bl	800168c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fad8 	bl	800168c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e020      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x498>
 80020f6:	e018      	b.n	800212a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e013      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420060 	.word	0x42420060

08002140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d0      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4965      	ldr	r1, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e073      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4936      	ldr	r1, [pc, #216]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7ff fa2c 	bl	800168c <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff fa28 	bl	800168c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e053      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f98a 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	08002c38 	.word	0x08002c38
 800230c:	20000000 	.word	0x20000000
 8002310:	20000010 	.word	0x20000010

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x30>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x36>
 8002342:	e027      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002346:	613b      	str	r3, [r7, #16]
      break;
 8002348:	e027      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0c5b      	lsrs	r3, r3, #17
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e004      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	613b      	str	r3, [r7, #16]
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002396:	613b      	str	r3, [r7, #16]
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	693b      	ldr	r3, [r7, #16]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	08002c48 	.word	0x08002c48
 80023b4:	08002c58 	.word	0x08002c58
 80023b8:	003d0900 	.word	0x003d0900

080023bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <RCC_Delay+0x34>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <RCC_Delay+0x38>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a5b      	lsrs	r3, r3, #9
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d8:	bf00      	nop
  }
  while (Delay --);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	60fa      	str	r2, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f9      	bne.n	80023d8 <RCC_Delay+0x1c>
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000000 	.word	0x20000000
 80023f4:	10624dd3 	.word	0x10624dd3

080023f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e041      	b.n	800248e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fd38 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fa6e 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d001      	beq.n	80024b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e035      	b.n	800251c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_TIM_Base_Start_IT+0x90>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x4e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x4e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_TIM_Base_Start_IT+0x94>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d010      	beq.n	800251a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e007      	b.n	800251a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40000400 	.word	0x40000400

08002530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b02      	cmp	r3, #2
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0202 	mvn.w	r2, #2
 800255c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9b4 	bl	80028e0 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f9a7 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f9b6 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0204 	mvn.w	r2, #4
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f98a 	bl	80028e0 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f97d 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f98c 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0208 	mvn.w	r2, #8
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2204      	movs	r2, #4
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f960 	bl	80028e0 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f953 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f962 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b10      	cmp	r3, #16
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b10      	cmp	r3, #16
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0210 	mvn.w	r2, #16
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2208      	movs	r2, #8
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f936 	bl	80028e0 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f929 	bl	80028ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f938 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fcd0 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa6b 	bl	8002bb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8fc 	bl	8002904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b20      	cmp	r3, #32
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0220 	mvn.w	r2, #32
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa36 	bl	8002ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b4      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd4>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_TIM_ConfigClockSource+0x172>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa6>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x11a>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x13a>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f000 f95e 	bl	8002ab6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f000 f947 	bl	8002ab6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8be 	bl	80029c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	; 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f915 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 8002858:	e02c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8dc 	bl	8002a24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f905 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 8002878:	e01c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f89e 	bl	80029c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f8f5 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f8ec 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
	...

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <TIM_Base_SetConfig+0x28>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0x28>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <TIM_Base_SetConfig+0xac>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d108      	bne.n	8002952 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <TIM_Base_SetConfig+0x52>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d003      	beq.n	800296a <TIM_Base_SetConfig+0x52>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <TIM_Base_SetConfig+0xac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d108      	bne.n	800297c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400

080029c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 030a 	bic.w	r3, r3, #10
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	621a      	str	r2, [r3, #32]
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f023 0210 	bic.w	r2, r3, #16
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	621a      	str	r2, [r3, #32]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f043 0307 	orr.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	021a      	lsls	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	609a      	str	r2, [r3, #8]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e041      	b.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d009      	beq.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d004      	beq.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10c      	bne.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	2600      	movs	r6, #0
 8002bcc:	4d0c      	ldr	r5, [pc, #48]	; (8002c00 <__libc_init_array+0x38>)
 8002bce:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bd0:	1b64      	subs	r4, r4, r5
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	f000 f822 	bl	8002c20 <_init>
 8002bdc:	2600      	movs	r6, #0
 8002bde:	4d0a      	ldr	r5, [pc, #40]	; (8002c08 <__libc_init_array+0x40>)
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <__libc_init_array+0x44>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002c5c 	.word	0x08002c5c
 8002c04:	08002c5c 	.word	0x08002c5c
 8002c08:	08002c5c 	.word	0x08002c5c
 8002c0c:	08002c60 	.word	0x08002c60

08002c10 <memset>:
 8002c10:	4603      	mov	r3, r0
 8002c12:	4402      	add	r2, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

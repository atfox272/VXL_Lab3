
Lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002c08  08002c08  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c08  08002c08  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000018  08002c28  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002c28  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d87  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c96  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd9b  00000000  00000000  00043b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082776  00000000  00000000  0004f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d204f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a34  00000000  00000000  000d20a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bcc 	.word	0x08002bcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002bcc 	.word	0x08002bcc

0800014c <trafficLightOn>:
#include "timer.h"
#include "defination.h"

int sseg_buffer[SSEG_AMOUNT];
int sseg_index = 0;
void trafficLightOn(enum LightDecode light) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  	  switch(light) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b05      	cmp	r3, #5
 800015a:	d86f      	bhi.n	800023c <trafficLightOn+0xf0>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <trafficLightOn+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	0800019d 	.word	0x0800019d
 800016c:	080001bd 	.word	0x080001bd
 8000170:	080001dd 	.word	0x080001dd
 8000174:	080001fd 	.word	0x080001fd
 8000178:	0800021d 	.word	0x0800021d
  	  case RED1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	2120      	movs	r1, #32
 8000180:	4830      	ldr	r0, [pc, #192]	; (8000244 <trafficLightOn+0xf8>)
 8000182:	f001 fd02 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 8000186:	2200      	movs	r2, #0
 8000188:	2140      	movs	r1, #64	; 0x40
 800018a:	482e      	ldr	r0, [pc, #184]	; (8000244 <trafficLightOn+0xf8>)
 800018c:	f001 fcfd 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 8000190:	2200      	movs	r2, #0
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	482b      	ldr	r0, [pc, #172]	; (8000244 <trafficLightOn+0xf8>)
 8000196:	f001 fcf8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 800019a:	e04f      	b.n	800023c <trafficLightOn+0xf0>
  	  case GREEN1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	2120      	movs	r1, #32
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <trafficLightOn+0xf8>)
 80001a2:	f001 fcf2 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 0);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2140      	movs	r1, #64	; 0x40
 80001aa:	4826      	ldr	r0, [pc, #152]	; (8000244 <trafficLightOn+0xf8>)
 80001ac:	f001 fced 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4823      	ldr	r0, [pc, #140]	; (8000244 <trafficLightOn+0xf8>)
 80001b6:	f001 fce8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 80001ba:	e03f      	b.n	800023c <trafficLightOn+0xf0>
  	  case YELLOW1:
  		  HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2120      	movs	r1, #32
 80001c0:	4820      	ldr	r0, [pc, #128]	; (8000244 <trafficLightOn+0xf8>)
 80001c2:	f001 fce2 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_1_GPIO_Port, YEL_1_Pin, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2140      	movs	r1, #64	; 0x40
 80001ca:	481e      	ldr	r0, [pc, #120]	; (8000244 <trafficLightOn+0xf8>)
 80001cc:	f001 fcdd 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_1_GPIO_Port, GRE_1_Pin, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	481b      	ldr	r0, [pc, #108]	; (8000244 <trafficLightOn+0xf8>)
 80001d6:	f001 fcd8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 80001da:	e02f      	b.n	800023c <trafficLightOn+0xf0>
  	  case RED2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	2104      	movs	r1, #4
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <trafficLightOn+0xf8>)
 80001e2:	f001 fcd2 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	4816      	ldr	r0, [pc, #88]	; (8000244 <trafficLightOn+0xf8>)
 80001ec:	f001 fccd 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	4813      	ldr	r0, [pc, #76]	; (8000244 <trafficLightOn+0xf8>)
 80001f6:	f001 fcc8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 80001fa:	e01f      	b.n	800023c <trafficLightOn+0xf0>
  	  case GREEN2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	4810      	ldr	r0, [pc, #64]	; (8000244 <trafficLightOn+0xf8>)
 8000202:	f001 fcc2 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <trafficLightOn+0xf8>)
 800020c:	f001 fcbd 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2110      	movs	r1, #16
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <trafficLightOn+0xf8>)
 8000216:	f001 fcb8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 800021a:	e00f      	b.n	800023c <trafficLightOn+0xf0>
  	  case YELLOW2:
  		  HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2104      	movs	r1, #4
 8000220:	4808      	ldr	r0, [pc, #32]	; (8000244 <trafficLightOn+0xf8>)
 8000222:	f001 fcb2 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(YEL_2_GPIO_Port, YEL_2_Pin, 1);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <trafficLightOn+0xf8>)
 800022c:	f001 fcad 	bl	8001b8a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GRE_2_GPIO_Port, GRE_2_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <trafficLightOn+0xf8>)
 8000236:	f001 fca8 	bl	8001b8a <HAL_GPIO_WritePin>
  		  break;
 800023a:	bf00      	nop
  	  }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <setUpBlinkLed>:
void setUpBlinkLed(enum ColorDecode colorDecode) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	switch(colorDecode) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d014      	beq.n	8000282 <setUpBlinkLed+0x3a>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc19      	bgt.n	8000290 <setUpBlinkLed+0x48>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <setUpBlinkLed+0x1e>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d007      	beq.n	8000274 <setUpBlinkLed+0x2c>
	case YELLOW_LED:
		trafficLightOn(YELLOW1);
		trafficLightOn(YELLOW2);
		break;
	}
}
 8000264:	e014      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(RED1);
 8000266:	2000      	movs	r0, #0
 8000268:	f7ff ff70 	bl	800014c <trafficLightOn>
		trafficLightOn(RED2);
 800026c:	2003      	movs	r0, #3
 800026e:	f7ff ff6d 	bl	800014c <trafficLightOn>
		break;
 8000272:	e00d      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(GREEN1);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff69 	bl	800014c <trafficLightOn>
		trafficLightOn(GREEN2);
 800027a:	2004      	movs	r0, #4
 800027c:	f7ff ff66 	bl	800014c <trafficLightOn>
		break;
 8000280:	e006      	b.n	8000290 <setUpBlinkLed+0x48>
		trafficLightOn(YELLOW1);
 8000282:	2002      	movs	r0, #2
 8000284:	f7ff ff62 	bl	800014c <trafficLightOn>
		trafficLightOn(YELLOW2);
 8000288:	2005      	movs	r0, #5
 800028a:	f7ff ff5f 	bl	800014c <trafficLightOn>
		break;
 800028e:	bf00      	nop
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <blinkLed>:
void blinkLed(enum ColorDecode colorDecode) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	switch(colorDecode) {
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d018      	beq.n	80002da <blinkLed+0x42>
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	dc1f      	bgt.n	80002ec <blinkLed+0x54>
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <blinkLed+0x1e>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d009      	beq.n	80002c8 <blinkLed+0x30>
	case YELLOW_LED:
		HAL_GPIO_TogglePin(YEL_1_GPIO_Port, YEL_1_Pin);
		HAL_GPIO_TogglePin(YEL_2_GPIO_Port, YEL_2_Pin);
		break;
	}
}
 80002b4:	e01a      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 80002b6:	2120      	movs	r1, #32
 80002b8:	480e      	ldr	r0, [pc, #56]	; (80002f4 <blinkLed+0x5c>)
 80002ba:	f001 fc7e 	bl	8001bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 80002be:	2104      	movs	r1, #4
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <blinkLed+0x5c>)
 80002c2:	f001 fc7a 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 80002c6:	e011      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(GRE_1_GPIO_Port, GRE_1_Pin);
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <blinkLed+0x5c>)
 80002cc:	f001 fc75 	bl	8001bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GRE_2_GPIO_Port, GRE_2_Pin);
 80002d0:	2110      	movs	r1, #16
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <blinkLed+0x5c>)
 80002d4:	f001 fc71 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 80002d8:	e008      	b.n	80002ec <blinkLed+0x54>
		HAL_GPIO_TogglePin(YEL_1_GPIO_Port, YEL_1_Pin);
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <blinkLed+0x5c>)
 80002de:	f001 fc6c 	bl	8001bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YEL_2_GPIO_Port, YEL_2_Pin);
 80002e2:	2108      	movs	r1, #8
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <blinkLed+0x5c>)
 80002e6:	f001 fc68 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 80002ea:	bf00      	nop
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800

080002f8 <display7SEG>:
void display7SEG(int num) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b09      	cmp	r3, #9
 8000304:	f200 81c0 	bhi.w	8000688 <display7SEG+0x390>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <display7SEG+0x18>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	08000339 	.word	0x08000339
 8000314:	0800038d 	.word	0x0800038d
 8000318:	080003e1 	.word	0x080003e1
 800031c:	08000435 	.word	0x08000435
 8000320:	08000489 	.word	0x08000489
 8000324:	080004dd 	.word	0x080004dd
 8000328:	08000531 	.word	0x08000531
 800032c:	08000585 	.word	0x08000585
 8000330:	080005d9 	.word	0x080005d9
 8000334:	0800062d 	.word	0x0800062d
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	48d0      	ldr	r0, [pc, #832]	; (8000680 <display7SEG+0x388>)
 800033e:	f001 fc24 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000348:	48ce      	ldr	r0, [pc, #824]	; (8000684 <display7SEG+0x38c>)
 800034a:	f001 fc1e 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000354:	48cb      	ldr	r0, [pc, #812]	; (8000684 <display7SEG+0x38c>)
 8000356:	f001 fc18 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	48c8      	ldr	r0, [pc, #800]	; (8000684 <display7SEG+0x38c>)
 8000362:	f001 fc12 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036c:	48c5      	ldr	r0, [pc, #788]	; (8000684 <display7SEG+0x38c>)
 800036e:	f001 fc0c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000378:	48c2      	ldr	r0, [pc, #776]	; (8000684 <display7SEG+0x38c>)
 800037a:	f001 fc06 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	48bf      	ldr	r0, [pc, #764]	; (8000684 <display7SEG+0x38c>)
 8000386:	f001 fc00 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 800038a:	e1a7      	b.n	80006dc <display7SEG+0x3e4>
		case 1:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	48bb      	ldr	r0, [pc, #748]	; (8000680 <display7SEG+0x388>)
 8000392:	f001 fbfa 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	48b9      	ldr	r0, [pc, #740]	; (8000684 <display7SEG+0x38c>)
 800039e:	f001 fbf4 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	48b6      	ldr	r0, [pc, #728]	; (8000684 <display7SEG+0x38c>)
 80003aa:	f001 fbee 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b4:	48b3      	ldr	r0, [pc, #716]	; (8000684 <display7SEG+0x38c>)
 80003b6:	f001 fbe8 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c0:	48b0      	ldr	r0, [pc, #704]	; (8000684 <display7SEG+0x38c>)
 80003c2:	f001 fbe2 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003cc:	48ad      	ldr	r0, [pc, #692]	; (8000684 <display7SEG+0x38c>)
 80003ce:	f001 fbdc 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	48aa      	ldr	r0, [pc, #680]	; (8000684 <display7SEG+0x38c>)
 80003da:	f001 fbd6 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 80003de:	e17d      	b.n	80006dc <display7SEG+0x3e4>
		case 2:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	48a6      	ldr	r0, [pc, #664]	; (8000680 <display7SEG+0x388>)
 80003e6:	f001 fbd0 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f0:	48a4      	ldr	r0, [pc, #656]	; (8000684 <display7SEG+0x38c>)
 80003f2:	f001 fbca 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	48a1      	ldr	r0, [pc, #644]	; (8000684 <display7SEG+0x38c>)
 80003fe:	f001 fbc4 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000408:	489e      	ldr	r0, [pc, #632]	; (8000684 <display7SEG+0x38c>)
 800040a:	f001 fbbe 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000414:	489b      	ldr	r0, [pc, #620]	; (8000684 <display7SEG+0x38c>)
 8000416:	f001 fbb8 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	4898      	ldr	r0, [pc, #608]	; (8000684 <display7SEG+0x38c>)
 8000422:	f001 fbb2 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	4895      	ldr	r0, [pc, #596]	; (8000684 <display7SEG+0x38c>)
 800042e:	f001 fbac 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 8000432:	e153      	b.n	80006dc <display7SEG+0x3e4>
		case 3:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	4891      	ldr	r0, [pc, #580]	; (8000680 <display7SEG+0x388>)
 800043a:	f001 fba6 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000444:	488f      	ldr	r0, [pc, #572]	; (8000684 <display7SEG+0x38c>)
 8000446:	f001 fba0 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000450:	488c      	ldr	r0, [pc, #560]	; (8000684 <display7SEG+0x38c>)
 8000452:	f001 fb9a 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4889      	ldr	r0, [pc, #548]	; (8000684 <display7SEG+0x38c>)
 800045e:	f001 fb94 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000468:	4886      	ldr	r0, [pc, #536]	; (8000684 <display7SEG+0x38c>)
 800046a:	f001 fb8e 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000474:	4883      	ldr	r0, [pc, #524]	; (8000684 <display7SEG+0x38c>)
 8000476:	f001 fb88 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4880      	ldr	r0, [pc, #512]	; (8000684 <display7SEG+0x38c>)
 8000482:	f001 fb82 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 8000486:	e129      	b.n	80006dc <display7SEG+0x3e4>
		case 4:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	487c      	ldr	r0, [pc, #496]	; (8000680 <display7SEG+0x388>)
 800048e:	f001 fb7c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	487a      	ldr	r0, [pc, #488]	; (8000684 <display7SEG+0x38c>)
 800049a:	f001 fb76 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	4877      	ldr	r0, [pc, #476]	; (8000684 <display7SEG+0x38c>)
 80004a6:	f001 fb70 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4874      	ldr	r0, [pc, #464]	; (8000684 <display7SEG+0x38c>)
 80004b2:	f001 fb6a 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	4871      	ldr	r0, [pc, #452]	; (8000684 <display7SEG+0x38c>)
 80004be:	f001 fb64 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	486e      	ldr	r0, [pc, #440]	; (8000684 <display7SEG+0x38c>)
 80004ca:	f001 fb5e 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	486b      	ldr	r0, [pc, #428]	; (8000684 <display7SEG+0x38c>)
 80004d6:	f001 fb58 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 80004da:	e0ff      	b.n	80006dc <display7SEG+0x3e4>
		case 5:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4867      	ldr	r0, [pc, #412]	; (8000680 <display7SEG+0x388>)
 80004e2:	f001 fb52 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4865      	ldr	r0, [pc, #404]	; (8000684 <display7SEG+0x38c>)
 80004ee:	f001 fb4c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4862      	ldr	r0, [pc, #392]	; (8000684 <display7SEG+0x38c>)
 80004fa:	f001 fb46 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	485f      	ldr	r0, [pc, #380]	; (8000684 <display7SEG+0x38c>)
 8000506:	f001 fb40 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000510:	485c      	ldr	r0, [pc, #368]	; (8000684 <display7SEG+0x38c>)
 8000512:	f001 fb3a 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	4859      	ldr	r0, [pc, #356]	; (8000684 <display7SEG+0x38c>)
 800051e:	f001 fb34 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4856      	ldr	r0, [pc, #344]	; (8000684 <display7SEG+0x38c>)
 800052a:	f001 fb2e 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 800052e:	e0d5      	b.n	80006dc <display7SEG+0x3e4>
		case 6:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	4852      	ldr	r0, [pc, #328]	; (8000680 <display7SEG+0x388>)
 8000536:	f001 fb28 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000540:	4850      	ldr	r0, [pc, #320]	; (8000684 <display7SEG+0x38c>)
 8000542:	f001 fb22 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054c:	484d      	ldr	r0, [pc, #308]	; (8000684 <display7SEG+0x38c>)
 800054e:	f001 fb1c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000558:	484a      	ldr	r0, [pc, #296]	; (8000684 <display7SEG+0x38c>)
 800055a:	f001 fb16 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000564:	4847      	ldr	r0, [pc, #284]	; (8000684 <display7SEG+0x38c>)
 8000566:	f001 fb10 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	4844      	ldr	r0, [pc, #272]	; (8000684 <display7SEG+0x38c>)
 8000572:	f001 fb0a 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4841      	ldr	r0, [pc, #260]	; (8000684 <display7SEG+0x38c>)
 800057e:	f001 fb04 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 8000582:	e0ab      	b.n	80006dc <display7SEG+0x3e4>
		case 7:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	483d      	ldr	r0, [pc, #244]	; (8000680 <display7SEG+0x388>)
 800058a:	f001 fafe 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	483b      	ldr	r0, [pc, #236]	; (8000684 <display7SEG+0x38c>)
 8000596:	f001 faf8 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4838      	ldr	r0, [pc, #224]	; (8000684 <display7SEG+0x38c>)
 80005a2:	f001 faf2 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4835      	ldr	r0, [pc, #212]	; (8000684 <display7SEG+0x38c>)
 80005ae:	f001 faec 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	4832      	ldr	r0, [pc, #200]	; (8000684 <display7SEG+0x38c>)
 80005ba:	f001 fae6 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	482f      	ldr	r0, [pc, #188]	; (8000684 <display7SEG+0x38c>)
 80005c6:	f001 fae0 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	482c      	ldr	r0, [pc, #176]	; (8000684 <display7SEG+0x38c>)
 80005d2:	f001 fada 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 80005d6:	e081      	b.n	80006dc <display7SEG+0x3e4>
		case 8:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <display7SEG+0x388>)
 80005de:	f001 fad4 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4826      	ldr	r0, [pc, #152]	; (8000684 <display7SEG+0x38c>)
 80005ea:	f001 face 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4823      	ldr	r0, [pc, #140]	; (8000684 <display7SEG+0x38c>)
 80005f6:	f001 fac8 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <display7SEG+0x38c>)
 8000602:	f001 fac2 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <display7SEG+0x38c>)
 800060e:	f001 fabc 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <display7SEG+0x38c>)
 800061a:	f001 fab6 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <display7SEG+0x38c>)
 8000626:	f001 fab0 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 800062a:	e057      	b.n	80006dc <display7SEG+0x3e4>
		case 9:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <display7SEG+0x388>)
 8000632:	f001 faaa 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <display7SEG+0x38c>)
 800063e:	f001 faa4 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <display7SEG+0x38c>)
 800064a:	f001 fa9e 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <display7SEG+0x38c>)
 8000656:	f001 fa98 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <display7SEG+0x38c>)
 8000662:	f001 fa92 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <display7SEG+0x38c>)
 800066e:	f001 fa8c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <display7SEG+0x38c>)
 800067a:	f001 fa86 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 800067e:	e02d      	b.n	80006dc <display7SEG+0x3e4>
 8000680:	40010c00 	.word	0x40010c00
 8000684:	40010800 	.word	0x40010800
		default:
			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4815      	ldr	r0, [pc, #84]	; (80006e4 <display7SEG+0x3ec>)
 800068e:	f001 fa7c 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <display7SEG+0x3f0>)
 800069a:	f001 fa76 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <display7SEG+0x3f0>)
 80006a6:	f001 fa70 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <display7SEG+0x3f0>)
 80006b2:	f001 fa6a 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <display7SEG+0x3f0>)
 80006be:	f001 fa64 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <display7SEG+0x3f0>)
 80006ca:	f001 fa5e 	bl	8001b8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <display7SEG+0x3f0>)
 80006d6:	f001 fa58 	bl	8001b8a <HAL_GPIO_WritePin>
			break;
 80006da:	bf00      	nop

	}
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	40010800 	.word	0x40010800

080006ec <update7SEG>:
void update7SEG(int index){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d872      	bhi.n	80007e0 <update7SEG+0xf4>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <update7SEG+0x14>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000711 	.word	0x08000711
 8000704:	08000745 	.word	0x08000745
 8000708:	08000779 	.word	0x08000779
 800070c:	080007ad 	.word	0x080007ad
    switch (index){
		  case 0:
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	4835      	ldr	r0, [pc, #212]	; (80007ec <update7SEG+0x100>)
 8000716:	f001 fa38 	bl	8001b8a <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[0]);
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <update7SEG+0x104>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdea 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4830      	ldr	r0, [pc, #192]	; (80007ec <update7SEG+0x100>)
 800072a:	f001 fa2e 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2102      	movs	r1, #2
 8000732:	482e      	ldr	r0, [pc, #184]	; (80007ec <update7SEG+0x100>)
 8000734:	f001 fa29 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	482b      	ldr	r0, [pc, #172]	; (80007ec <update7SEG+0x100>)
 800073e:	f001 fa24 	bl	8001b8a <HAL_GPIO_WritePin>
			  break;
 8000742:	e04e      	b.n	80007e2 <update7SEG+0xf6>
		  case 1:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	2101      	movs	r1, #1
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <update7SEG+0x100>)
 800074a:	f001 fa1e 	bl	8001b8a <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[1]);
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <update7SEG+0x104>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fdd0 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2102      	movs	r1, #2
 800075c:	4823      	ldr	r0, [pc, #140]	; (80007ec <update7SEG+0x100>)
 800075e:	f001 fa14 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2104      	movs	r1, #4
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <update7SEG+0x100>)
 8000768:	f001 fa0f 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2108      	movs	r1, #8
 8000770:	481e      	ldr	r0, [pc, #120]	; (80007ec <update7SEG+0x100>)
 8000772:	f001 fa0a 	bl	8001b8a <HAL_GPIO_WritePin>
	  		  break;
 8000776:	e034      	b.n	80007e2 <update7SEG+0xf6>
	  	  case 2:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <update7SEG+0x100>)
 800077e:	f001 fa04 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <update7SEG+0x100>)
 8000788:	f001 f9ff 	bl	8001b8a <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[2]);
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <update7SEG+0x104>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fdb1 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <update7SEG+0x100>)
 800079c:	f001 f9f5 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2108      	movs	r1, #8
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <update7SEG+0x100>)
 80007a6:	f001 f9f0 	bl	8001b8a <HAL_GPIO_WritePin>
	  		  break;
 80007aa:	e01a      	b.n	80007e2 <update7SEG+0xf6>
	  	  case 3:
			  HAL_GPIO_WritePin(SSEG_0_GPIO_Port, SSEG_0_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <update7SEG+0x100>)
 80007b2:	f001 f9ea 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2102      	movs	r1, #2
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <update7SEG+0x100>)
 80007bc:	f001 f9e5 	bl	8001b8a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2104      	movs	r1, #4
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <update7SEG+0x100>)
 80007c6:	f001 f9e0 	bl	8001b8a <HAL_GPIO_WritePin>
			  display7SEG(sseg_buffer[3]);
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <update7SEG+0x104>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd92 	bl	80002f8 <display7SEG>
			  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2108      	movs	r1, #8
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <update7SEG+0x100>)
 80007da:	f001 f9d6 	bl	8001b8a <HAL_GPIO_WritePin>
	  		  break;
 80007de:	e000      	b.n	80007e2 <update7SEG+0xf6>
        default:
            break;
 80007e0:	bf00      	nop
    }
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	20000064 	.word	0x20000064

080007f4 <set7Seg4BCD>:
void set7Seg4BCD(int first_num, int second_num) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	sseg_buffer[0] = first_num / 10;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <set7Seg4BCD+0x70>)
 8000802:	fb82 1203 	smull	r1, r2, r2, r3
 8000806:	1092      	asrs	r2, r2, #2
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <set7Seg4BCD+0x74>)
 800080e:	6013      	str	r3, [r2, #0]
	sseg_buffer[1] = first_num % 10;
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <set7Seg4BCD+0x70>)
 8000814:	fb83 2301 	smull	r2, r3, r3, r1
 8000818:	109a      	asrs	r2, r3, #2
 800081a:	17cb      	asrs	r3, r1, #31
 800081c:	1ad2      	subs	r2, r2, r3
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <set7Seg4BCD+0x74>)
 800082a:	605a      	str	r2, [r3, #4]
	sseg_buffer[2] = second_num / 10;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <set7Seg4BCD+0x70>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1092      	asrs	r2, r2, #2
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <set7Seg4BCD+0x74>)
 800083c:	6093      	str	r3, [r2, #8]
	sseg_buffer[3] = second_num % 10;
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <set7Seg4BCD+0x70>)
 8000842:	fb83 2301 	smull	r2, r3, r3, r1
 8000846:	109a      	asrs	r2, r3, #2
 8000848:	17cb      	asrs	r3, r1, #31
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	1aca      	subs	r2, r1, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <set7Seg4BCD+0x74>)
 8000858:	60da      	str	r2, [r3, #12]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	66666667 	.word	0x66666667
 8000868:	20000064 	.word	0x20000064

0800086c <ledScanningRun>:
void ledScanningRun(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if(timer_flag_scanning_7seg) {
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <ledScanningRun+0x38>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <ledScanningRun+0x34>
		setTimerScanning7Seg(SCANNING_DURATION);
 8000878:	2032      	movs	r0, #50	; 0x32
 800087a:	f000 fb8b 	bl	8000f94 <setTimerScanning7Seg>
		sseg_index = (sseg_index + 1) % SSEG_AMOUNT;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <ledScanningRun+0x3c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	425a      	negs	r2, r3
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	f002 0203 	and.w	r2, r2, #3
 800088e:	bf58      	it	pl
 8000890:	4253      	negpl	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <ledScanningRun+0x3c>)
 8000894:	6013      	str	r3, [r2, #0]
		update7SEG(sseg_index);
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <ledScanningRun+0x3c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff26 	bl	80006ec <update7SEG>
	}
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	20000034 	.word	0x20000034

080008ac <reset_buffer>:
enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState[N0_OF_BUTTONS];

int buffer_value;

void reset_buffer(void) {
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	buffer_value = 0;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <reset_buffer+0x14>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000008c 	.word	0x2000008c

080008c4 <get_buffer>:
int get_buffer(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return buffer_value;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <get_buffer+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <incr_buffer>:
void incr_buffer(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	buffer_value = (traffic_is_modify_mode()) ? (buffer_value + 1) % BUFFER_LIMIT : 0;
 80008dc:	f000 fc14 	bl	8001108 <traffic_is_modify_mode>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00d      	beq.n	8000902 <incr_buffer+0x2a>
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <incr_buffer+0x34>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <incr_buffer+0x38>)
 80008ee:	fb83 1302 	smull	r1, r3, r3, r2
 80008f2:	1159      	asrs	r1, r3, #5
 80008f4:	17d3      	asrs	r3, r2, #31
 80008f6:	1acb      	subs	r3, r1, r3
 80008f8:	2164      	movs	r1, #100	; 0x64
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	e000      	b.n	8000904 <incr_buffer+0x2c>
 8000902:	2300      	movs	r3, #0
 8000904:	4a01      	ldr	r2, [pc, #4]	; (800090c <incr_buffer+0x34>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000008c 	.word	0x2000008c
 8000910:	51eb851f 	.word	0x51eb851f

08000914 <init_fsm_for_input_processing>:
void init_fsm_for_input_processing(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	e007      	b.n	8000930 <init_fsm_for_input_processing+0x1c>
		buttonState[button_index] = BUTTON_RELEASED;
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <init_fsm_for_input_processing+0x30>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3301      	adds	r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	ddf4      	ble.n	8000920 <init_fsm_for_input_processing+0xc>
	}
	reset_buffer();
 8000936:	f7ff ffb9 	bl	80008ac <reset_buffer>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000088 	.word	0x20000088

08000948 <fsm_for_input_processing>:
void fsm_for_input_processing(unsigned char index){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	switch(buttonState[index]){
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <fsm_for_input_processing+0xc8>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d036      	beq.n	80009ca <fsm_for_input_processing+0x82>
 800095c:	2b02      	cmp	r3, #2
 800095e:	dc52      	bgt.n	8000a06 <fsm_for_input_processing+0xbe>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <fsm_for_input_processing+0x22>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d011      	beq.n	800098c <fsm_for_input_processing+0x44>
				incr_buffer();
			}
		}
		break;
	}
}
 8000968:	e04d      	b.n	8000a06 <fsm_for_input_processing+0xbe>
		if(is_button_pressed(index)){
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8e3 	bl	8000b38 <is_button_pressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d041      	beq.n	80009fc <fsm_for_input_processing+0xb4>
			buttonState[index] = BUTTON_PRESSED;
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <fsm_for_input_processing+0xc8>)
 800097c:	2101      	movs	r1, #1
 800097e:	54d1      	strb	r1, [r2, r3]
			if(index == MODIFY_BUTTON_ENCODE) {
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d13a      	bne.n	80009fc <fsm_for_input_processing+0xb4>
				incr_buffer();
 8000986:	f7ff ffa7 	bl	80008d8 <incr_buffer>
		break;
 800098a:	e037      	b.n	80009fc <fsm_for_input_processing+0xb4>
		if(!is_button_pressed(index)){
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f8d2 	bl	8000b38 <is_button_pressed>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <fsm_for_input_processing+0x5c>
			buttonState[index] = BUTTON_RELEASED;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <fsm_for_input_processing+0xc8>)
 800099e:	2100      	movs	r1, #0
 80009a0:	54d1      	strb	r1, [r2, r3]
		break;
 80009a2:	e02d      	b.n	8000a00 <fsm_for_input_processing+0xb8>
			if(is_button_pressed_1s(index)){
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f8e0 	bl	8000b6c <is_button_pressed_1s>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d026      	beq.n	8000a00 <fsm_for_input_processing+0xb8>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <fsm_for_input_processing+0xc8>)
 80009b6:	2102      	movs	r1, #2
 80009b8:	54d1      	strb	r1, [r2, r3]
				if(index == MODIFY_BUTTON_ENCODE) setTimerIncHoldButton(INC_HOLD_DURATION);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d11f      	bne.n	8000a00 <fsm_for_input_processing+0xb8>
 80009c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009c4:	f000 faae 	bl	8000f24 <setTimerIncHoldButton>
		break;
 80009c8:	e01a      	b.n	8000a00 <fsm_for_input_processing+0xb8>
		if(!is_button_pressed(index)){
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f8b3 	bl	8000b38 <is_button_pressed>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d103      	bne.n	80009e0 <fsm_for_input_processing+0x98>
			buttonState[index] = BUTTON_RELEASED;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <fsm_for_input_processing+0xc8>)
 80009dc:	2100      	movs	r1, #0
 80009de:	54d1      	strb	r1, [r2, r3]
		if(index == MODIFY_BUTTON_ENCODE) {
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10e      	bne.n	8000a04 <fsm_for_input_processing+0xbc>
			if(timer_flag_inc_hold) {
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <fsm_for_input_processing+0xcc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00a      	beq.n	8000a04 <fsm_for_input_processing+0xbc>
				setTimerIncHoldButton(INC_HOLD_DURATION);
 80009ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009f2:	f000 fa97 	bl	8000f24 <setTimerIncHoldButton>
				incr_buffer();
 80009f6:	f7ff ff6f 	bl	80008d8 <incr_buffer>
		break;
 80009fa:	e003      	b.n	8000a04 <fsm_for_input_processing+0xbc>
		break;
 80009fc:	bf00      	nop
 80009fe:	e002      	b.n	8000a06 <fsm_for_input_processing+0xbe>
		break;
 8000a00:	bf00      	nop
 8000a02:	e000      	b.n	8000a06 <fsm_for_input_processing+0xbe>
		break;
 8000a04:	bf00      	nop
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000088 	.word	0x20000088
 8000a14:	20000058 	.word	0x20000058

08000a18 <is_button_hold>:
int is_button_hold(unsigned char index) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	return (buttonState[index] == BUTTON_PRESSED_MORE_THAN_1_SECOND);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <is_button_hold+0x24>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	bf0c      	ite	eq
 8000a2c:	2301      	moveq	r3, #1
 8000a2e:	2300      	movne	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000088 	.word	0x20000088

08000a40 <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void){
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	e061      	b.n	8000b10 <button_reading+0xd0>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4933      	ldr	r1, [pc, #204]	; (8000b20 <button_reading+0xe0>)
 8000a52:	5c89      	ldrb	r1, [r1, r2]
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <button_reading+0xe4>)
 8000a56:	54d1      	strb	r1, [r2, r3]
		switch(i) {
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d01a      	beq.n	8000a94 <button_reading+0x54>
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	dc22      	bgt.n	8000aa8 <button_reading+0x68>
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <button_reading+0x2c>
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d00a      	beq.n	8000a80 <button_reading+0x40>
 8000a6a:	e01d      	b.n	8000aa8 <button_reading+0x68>
		case 0:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000a6c:	79fc      	ldrb	r4, [r7, #7]
 8000a6e:	2110      	movs	r1, #16
 8000a70:	482d      	ldr	r0, [pc, #180]	; (8000b28 <button_reading+0xe8>)
 8000a72:	f001 f873 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <button_reading+0xe0>)
 8000a7c:	551a      	strb	r2, [r3, r4]
			break;
 8000a7e:	e013      	b.n	8000aa8 <button_reading+0x68>
		case 1:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000a80:	79fc      	ldrb	r4, [r7, #7]
 8000a82:	2120      	movs	r1, #32
 8000a84:	4828      	ldr	r0, [pc, #160]	; (8000b28 <button_reading+0xe8>)
 8000a86:	f001 f869 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <button_reading+0xe0>)
 8000a90:	551a      	strb	r2, [r3, r4]
			break;
 8000a92:	e009      	b.n	8000aa8 <button_reading+0x68>
		case 2:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000a94:	79fc      	ldrb	r4, [r7, #7]
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <button_reading+0xe8>)
 8000a9a:	f001 f85f 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <button_reading+0xe0>)
 8000aa4:	551a      	strb	r2, [r3, r4]
			break;
 8000aa6:	bf00      	nop
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <button_reading+0xe0>)
 8000aac:	5cd2      	ldrb	r2, [r2, r3]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	491c      	ldr	r1, [pc, #112]	; (8000b24 <button_reading+0xe4>)
 8000ab2:	5ccb      	ldrb	r3, [r1, r3]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d105      	bne.n	8000ac4 <button_reading+0x84>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4918      	ldr	r1, [pc, #96]	; (8000b20 <button_reading+0xe0>)
 8000abe:	5c89      	ldrb	r1, [r1, r2]
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <button_reading+0xec>)
 8000ac2:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <button_reading+0xec>)
 8000ac8:	5cd3      	ldrb	r3, [r2, r3]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d114      	bne.n	8000af8 <button_reading+0xb8>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <button_reading+0xf0>)
 8000ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad6:	2b63      	cmp	r3, #99	; 0x63
 8000ad8:	d809      	bhi.n	8000aee <button_reading+0xae>
					counterForButtonPress1s[i]++;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <button_reading+0xf0>)
 8000ade:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ae2:	3201      	adds	r2, #1
 8000ae4:	b291      	uxth	r1, r2
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <button_reading+0xf0>)
 8000ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000aec:	e00d      	b.n	8000b0a <button_reading+0xca>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <button_reading+0xf4>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	54d1      	strb	r1, [r2, r3]
 8000af6:	e008      	b.n	8000b0a <button_reading+0xca>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <button_reading+0xf0>)
 8000afc:	2100      	movs	r1, #0
 8000afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <button_reading+0xf4>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d99a      	bls.n	8000a4c <button_reading+0xc>
			}
	}
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	2000003c 	.word	0x2000003c
 8000b24:	20000040 	.word	0x20000040
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	20000038 	.word	0x20000038
 8000b30:	20000048 	.word	0x20000048
 8000b34:	20000044 	.word	0x20000044

08000b38 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d901      	bls.n	8000b4c <is_button_pressed+0x14>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e007      	b.n	8000b5c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <is_button_pressed+0x30>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000038 	.word	0x20000038

08000b6c <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d901      	bls.n	8000b80 <is_button_pressed_1s+0x14>
 8000b7c:	23ff      	movs	r3, #255	; 0xff
 8000b7e:	e007      	b.n	8000b90 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <is_button_pressed_1s+0x30>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000044 	.word	0x20000044

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f000 fcef 	bl	8001588 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_Base_Start_IT(&htim2);
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0x50>)
 8000bac:	f001 fc4a 	bl	8002444 <HAL_TIM_Base_Start_IT>
  init_fsm_for_input_processing();
 8000bb0:	f7ff feb0 	bl	8000914 <init_fsm_for_input_processing>
  init_timer();
 8000bb4:	f000 fa0a 	bl	8000fcc <init_timer>
  init_fsm_traffic_mode();
 8000bb8:	f000 fa7c 	bl	80010b4 <init_fsm_traffic_mode>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f81a 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f8a0 	bl	8000d04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bc4:	f000 f852 	bl	8000c6c <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	e007      	b.n	8000bde <main+0x3e>
		  fsm_for_input_processing(button_index);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff feb8 	bl	8000948 <fsm_for_input_processing>
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	ddf4      	ble.n	8000bce <main+0x2e>
	  }
	  ledScanningRun();
 8000be4:	f7ff fe42 	bl	800086c <ledScanningRun>
	  fsm_traffic_light_mode();
 8000be8:	f000 fbc8 	bl	800137c <fsm_traffic_light_mode>
	  for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000bec:	e7ec      	b.n	8000bc8 <main+0x28>
 8000bee:	bf00      	nop
 8000bf0:	20000094 	.word	0x20000094

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b090      	sub	sp, #64	; 0x40
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2228      	movs	r2, #40	; 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ffda 	bl	8002bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 ffde 	bl	8001bec <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c36:	f000 f8c5 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fa4a 	bl	80020ec <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 f8b1 	bl	8000dc4 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3740      	adds	r7, #64	; 0x40
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000c92:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000ca0:	2209      	movs	r2, #9
 8000ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000cb2:	f001 fb77 	bl	80023a4 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cbc:	f000 f882 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000cce:	f001 fd0d 	bl	80026ec <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cd8:	f000 f874 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_TIM2_Init+0x94>)
 8000cea:	f001 fed9 	bl	8002aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f866 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000094 	.word	0x20000094

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_GPIO_Init+0xb4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_2_Pin|YEL_2_Pin|GRE_2_Pin|RED_1_Pin
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 8000d4e:	481b      	ldr	r0, [pc, #108]	; (8000dbc <MX_GPIO_Init+0xb8>)
 8000d50:	f000 ff1b 	bl	8001b8a <HAL_GPIO_WritePin>
                          |YEL_1_Pin|GRE_1_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSEG_0_Pin|SSEG_1_Pin|SSEG_2_Pin|SSEG_3_Pin
 8000d54:	2200      	movs	r2, #0
 8000d56:	218f      	movs	r1, #143	; 0x8f
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <MX_GPIO_Init+0xbc>)
 8000d5a:	f000 ff16 	bl	8001b8a <HAL_GPIO_WritePin>
                          |S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_2_Pin YEL_2_Pin GRE_2_Pin RED_1_Pin
                           YEL_1_Pin GRE_1_Pin S2_Pin S3_Pin
                           S4_Pin S5_Pin S6_Pin S7_Pin */
  GPIO_InitStruct.Pin = RED_2_Pin|YEL_2_Pin|GRE_2_Pin|RED_1_Pin
 8000d5e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8000d62:	60bb      	str	r3, [r7, #8]
                          |YEL_1_Pin|GRE_1_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_GPIO_Init+0xb8>)
 8000d78:	f000 fd76 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_0_Pin SSEG_1_Pin SSEG_2_Pin SSEG_3_Pin
                           S1_Pin */
  GPIO_InitStruct.Pin = SSEG_0_Pin|SSEG_1_Pin|SSEG_2_Pin|SSEG_3_Pin
 8000d7c:	238f      	movs	r3, #143	; 0x8f
 8000d7e:	60bb      	str	r3, [r7, #8]
                          |S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0xbc>)
 8000d94:	f000 fd68 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d98:	2370      	movs	r3, #112	; 0x70
 8000d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_GPIO_Init+0xbc>)
 8000dac:	f000 fd5c 	bl	8001868 <HAL_GPIO_Init>

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	201c      	movs	r0, #28
 8000e64:	f000 fcc9 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e68:	201c      	movs	r0, #28
 8000e6a:	f000 fce2 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec2:	f000 fba7 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f001 fb03 	bl	80024dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000094 	.word	0x20000094

08000ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <setTimerNormalMode>:
#include "traffic_light_mode.h"
#include "input_reading.h"
#include "defination.h"
#include "stm32f1xx_hal_tim.h"

void setTimerNormalMode(int num) {		/* Always SECOND_UNIT*/
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	timer_counter_normal_mode = num / TIMER_CYCLE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <setTimerNormalMode+0x2c>)
 8000ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8000efc:	1092      	asrs	r2, r2, #2
 8000efe:	17db      	asrs	r3, r3, #31
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <setTimerNormalMode+0x30>)
 8000f04:	6013      	str	r3, [r2, #0]
	timer_flag_normal_mode = 0;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <setTimerNormalMode+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	20000060 	.word	0x20000060
 8000f20:	20000084 	.word	0x20000084

08000f24 <setTimerIncHoldButton>:
void setTimerIncHoldButton(int num) {	/* Always INC_HOLD_DURATION*/
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	timer_counter_inc_hold = num / TIMER_CYCLE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <setTimerIncHoldButton+0x2c>)
 8000f30:	fb82 1203 	smull	r1, r2, r2, r3
 8000f34:	1092      	asrs	r2, r2, #2
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <setTimerIncHoldButton+0x30>)
 8000f3c:	6013      	str	r3, [r2, #0]
	timer_flag_inc_hold = 0;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <setTimerIncHoldButton+0x34>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	66666667 	.word	0x66666667
 8000f54:	20000050 	.word	0x20000050
 8000f58:	20000058 	.word	0x20000058

08000f5c <setTimerBlinkLed>:
void setTimerBlinkLed(int num) {		/* Always BLINK_LED_COUNTER*/
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	timer_counter_blink_led = num / TIMER_CYCLE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <setTimerBlinkLed+0x2c>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1092      	asrs	r2, r2, #2
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <setTimerBlinkLed+0x30>)
 8000f74:	6013      	str	r3, [r2, #0]
	timer_flag_blink_led = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <setTimerBlinkLed+0x34>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	66666667 	.word	0x66666667
 8000f8c:	2000005c 	.word	0x2000005c
 8000f90:	20000078 	.word	0x20000078

08000f94 <setTimerScanning7Seg>:
void setTimerScanning7Seg(int num) {	/* Always SCANNING_DURATION*/
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timer_counter_scanning_7seg = num / TIMER_CYCLE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <setTimerScanning7Seg+0x2c>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	1092      	asrs	r2, r2, #2
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <setTimerScanning7Seg+0x30>)
 8000fac:	6013      	str	r3, [r2, #0]
	timer_flag_scanning_7seg = 0;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <setTimerScanning7Seg+0x34>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	66666667 	.word	0x66666667
 8000fc4:	20000080 	.word	0x20000080
 8000fc8:	2000007c 	.word	0x2000007c

08000fcc <init_timer>:
void init_timer(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	setTimerNormalMode(SECOND_UNIT);
 8000fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd4:	f7ff ff8a 	bl	8000eec <setTimerNormalMode>
	setTimerIncHoldButton(INC_HOLD_DURATION);
 8000fd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fdc:	f7ff ffa2 	bl	8000f24 <setTimerIncHoldButton>
	setTimerBlinkLed(BLINK_LED_COUNTER);
 8000fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe4:	f7ff ffba 	bl	8000f5c <setTimerBlinkLed>
	setTimerScanning7Seg(SCANNING_DURATION);
 8000fe8:	2032      	movs	r0, #50	; 0x32
 8000fea:	f7ff ffd3 	bl	8000f94 <setTimerScanning7Seg>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d101      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8001006:	f7ff fd1b 	bl	8000a40 <button_reading>
	}
	if(traffic_is_normal_mode()) {
 800100a:	f000 f895 	bl	8001138 <traffic_is_normal_mode>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <HAL_TIM_PeriodElapsedCallback+0x3a>
		timer_counter_normal_mode--;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800101c:	6013      	str	r3, [r2, #0]
		if(timer_counter_normal_mode == 0) {
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d126      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x80>
			timer_flag_normal_mode = 1;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e022      	b.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x80>
		}
	}
	else if(traffic_is_modify_mode()) {
 800102e:	f000 f86b 	bl	8001108 <traffic_is_modify_mode>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d01d      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x80>
		/* Blinking led */
		timer_counter_blink_led--;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001040:	6013      	str	r3, [r2, #0]
		if(timer_counter_blink_led == 0) {
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_TIM_PeriodElapsedCallback+0x5c>
			timer_flag_blink_led = 1;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
		}
		/* Button */
		if(is_button_hold(MODIFY_BUTTON_ENCODE)) {
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fce1 	bl	8000a18 <is_button_hold>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x80>
			timer_counter_inc_hold--;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3b01      	subs	r3, #1
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001064:	6013      	str	r3, [r2, #0]
			if(timer_counter_inc_hold == 0) {
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x80>
				timer_flag_inc_hold = 1;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
			}
		}
	}
	timer_counter_scanning_7seg--;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800107c:	6013      	str	r3, [r2, #0]
	if(timer_counter_scanning_7seg == 0) {
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_TIM_PeriodElapsedCallback+0x98>
		timer_flag_scanning_7seg = 1;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
	}

}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000060 	.word	0x20000060
 8001098:	20000084 	.word	0x20000084
 800109c:	2000005c 	.word	0x2000005c
 80010a0:	20000078 	.word	0x20000078
 80010a4:	20000050 	.word	0x20000050
 80010a8:	20000058 	.word	0x20000058
 80010ac:	20000080 	.word	0x20000080
 80010b0:	2000007c 	.word	0x2000007c

080010b4 <init_fsm_traffic_mode>:
int secondWayCounter;
int redCountDown = RED_LIGHT_LIMIT * SECOND_UNIT;
int yelCountDown = YELLOW_LIGHT_LIMIT * SECOND_UNIT;
int greCountDown = GREEN_LIGHT_LIMIT * SECOND_UNIT;

void init_fsm_traffic_mode(void) {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	trafficLightMode = INIT_MODE;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <init_fsm_traffic_mode+0x14>)
 80010ba:	2205      	movs	r2, #5
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000090 	.word	0x20000090

080010cc <reset_fsm_normal_mode>:
void reset_fsm_normal_mode(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	normalModeState = RED_GREEN;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <reset_fsm_normal_mode+0x28>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	setTimerNormalMode(SECOND_UNIT);
 80010d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010da:	f7ff ff07 	bl	8000eec <setTimerNormalMode>
	firstWayCounter = redCountDown;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <reset_fsm_normal_mode+0x2c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a06      	ldr	r2, [pc, #24]	; (80010fc <reset_fsm_normal_mode+0x30>)
 80010e4:	6013      	str	r3, [r2, #0]
	secondWayCounter = greCountDown;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <reset_fsm_normal_mode+0x34>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <reset_fsm_normal_mode+0x38>)
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000004e 	.word	0x2000004e
 80010f8:	20000004 	.word	0x20000004
 80010fc:	200000dc 	.word	0x200000dc
 8001100:	2000000c 	.word	0x2000000c
 8001104:	200000e0 	.word	0x200000e0

08001108 <traffic_is_modify_mode>:
int traffic_is_modify_mode(void) {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	return (trafficLightMode == MODIFY_RED_MODE && trafficLightMode == MODIFY_YELLOW_MODE && trafficLightMode == MODIFY_GREEN_MODE);
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <traffic_is_modify_mode+0x2c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d109      	bne.n	8001128 <traffic_is_modify_mode+0x20>
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <traffic_is_modify_mode+0x2c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d105      	bne.n	8001128 <traffic_is_modify_mode+0x20>
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <traffic_is_modify_mode+0x2c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d101      	bne.n	8001128 <traffic_is_modify_mode+0x20>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <traffic_is_modify_mode+0x22>
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000090 	.word	0x20000090

08001138 <traffic_is_normal_mode>:
int traffic_is_normal_mode(void) {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return (trafficLightMode == NORMAL_MODE);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <traffic_is_normal_mode+0x1c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000090 	.word	0x20000090

08001158 <fsm_normal_mode>:

void fsm_normal_mode(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if(timer_flag_normal_mode) {
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <fsm_normal_mode+0x114>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00d      	beq.n	8001180 <fsm_normal_mode+0x28>
		setTimerNormalMode(SECOND_UNIT);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f7ff fec0 	bl	8000eec <setTimerNormalMode>
		firstWayCounter--;
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <fsm_normal_mode+0x118>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <fsm_normal_mode+0x118>)
 8001174:	6013      	str	r3, [r2, #0]
		secondWayCounter--;
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <fsm_normal_mode+0x11c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <fsm_normal_mode+0x11c>)
 800117e:	6013      	str	r3, [r2, #0]
	}
	switch(normalModeState) {
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <fsm_normal_mode+0x120>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d866      	bhi.n	8001256 <fsm_normal_mode+0xfe>
 8001188:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <fsm_normal_mode+0x38>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011a1 	.word	0x080011a1
 8001194:	080011c7 	.word	0x080011c7
 8001198:	080011f5 	.word	0x080011f5
 800119c:	0800121b 	.word	0x0800121b
	case RED_GREEN:
		if(secondWayCounter == -1) {
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <fsm_normal_mode+0x11c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d14e      	bne.n	8001248 <fsm_normal_mode+0xf0>
			normalModeState = RED_YELLOW;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <fsm_normal_mode+0x120>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
			trafficLightOn(RED1);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7fe ffcb 	bl	800014c <trafficLightOn>
			trafficLightOn(YELLOW2);
 80011b6:	2005      	movs	r0, #5
 80011b8:	f7fe ffc8 	bl	800014c <trafficLightOn>
			secondWayCounter = yelCountDown;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <fsm_normal_mode+0x124>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <fsm_normal_mode+0x11c>)
 80011c2:	6013      	str	r3, [r2, #0]
		}
		break;
 80011c4:	e040      	b.n	8001248 <fsm_normal_mode+0xf0>
	case RED_YELLOW:
		if(secondWayCounter == -1) {
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <fsm_normal_mode+0x11c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ce:	d13d      	bne.n	800124c <fsm_normal_mode+0xf4>
			normalModeState = GREEN_RED;
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <fsm_normal_mode+0x120>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
			trafficLightOn(GREEN1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7fe ffb8 	bl	800014c <trafficLightOn>
			trafficLightOn(RED2);
 80011dc:	2003      	movs	r0, #3
 80011de:	f7fe ffb5 	bl	800014c <trafficLightOn>
			firstWayCounter = greCountDown;
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <fsm_normal_mode+0x128>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <fsm_normal_mode+0x118>)
 80011e8:	6013      	str	r3, [r2, #0]
			secondWayCounter = redCountDown;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <fsm_normal_mode+0x12c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <fsm_normal_mode+0x11c>)
 80011f0:	6013      	str	r3, [r2, #0]
		}
		break;
 80011f2:	e02b      	b.n	800124c <fsm_normal_mode+0xf4>
	case GREEN_RED:
		if(firstWayCounter == -1) {
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <fsm_normal_mode+0x118>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d128      	bne.n	8001250 <fsm_normal_mode+0xf8>
			normalModeState = YELLOW_RED;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <fsm_normal_mode+0x120>)
 8001200:	2203      	movs	r2, #3
 8001202:	701a      	strb	r2, [r3, #0]
			trafficLightOn(YELLOW1);
 8001204:	2002      	movs	r0, #2
 8001206:	f7fe ffa1 	bl	800014c <trafficLightOn>
			trafficLightOn(RED2);
 800120a:	2003      	movs	r0, #3
 800120c:	f7fe ff9e 	bl	800014c <trafficLightOn>
			firstWayCounter = yelCountDown;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <fsm_normal_mode+0x124>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a16      	ldr	r2, [pc, #88]	; (8001270 <fsm_normal_mode+0x118>)
 8001216:	6013      	str	r3, [r2, #0]
		}
		break;
 8001218:	e01a      	b.n	8001250 <fsm_normal_mode+0xf8>
	case YELLOW_RED:
		if(firstWayCounter == -1) {
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <fsm_normal_mode+0x118>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001222:	d117      	bne.n	8001254 <fsm_normal_mode+0xfc>
			normalModeState = RED_GREEN;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <fsm_normal_mode+0x120>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
			trafficLightOn(RED1);
 800122a:	2000      	movs	r0, #0
 800122c:	f7fe ff8e 	bl	800014c <trafficLightOn>
			trafficLightOn(GREEN2);
 8001230:	2004      	movs	r0, #4
 8001232:	f7fe ff8b 	bl	800014c <trafficLightOn>
			firstWayCounter = redCountDown;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <fsm_normal_mode+0x12c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <fsm_normal_mode+0x118>)
 800123c:	6013      	str	r3, [r2, #0]
			secondWayCounter = greCountDown;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <fsm_normal_mode+0x128>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <fsm_normal_mode+0x11c>)
 8001244:	6013      	str	r3, [r2, #0]
		}
		break;
 8001246:	e005      	b.n	8001254 <fsm_normal_mode+0xfc>
		break;
 8001248:	bf00      	nop
 800124a:	e004      	b.n	8001256 <fsm_normal_mode+0xfe>
		break;
 800124c:	bf00      	nop
 800124e:	e002      	b.n	8001256 <fsm_normal_mode+0xfe>
		break;
 8001250:	bf00      	nop
 8001252:	e000      	b.n	8001256 <fsm_normal_mode+0xfe>
		break;
 8001254:	bf00      	nop
	}
	set7Seg4BCD(firstWayCounter, secondWayCounter);
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <fsm_normal_mode+0x118>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <fsm_normal_mode+0x11c>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fac7 	bl	80007f4 <set7Seg4BCD>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000084 	.word	0x20000084
 8001270:	200000dc 	.word	0x200000dc
 8001274:	200000e0 	.word	0x200000e0
 8001278:	2000004e 	.word	0x2000004e
 800127c:	20000008 	.word	0x20000008
 8001280:	2000000c 	.word	0x2000000c
 8001284:	20000004 	.word	0x20000004

08001288 <fsm_modify_mode>:
void fsm_modify_mode(enum ColorDecode colorDecode) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(colorDecode == RED_LED) {
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10b      	bne.n	80012b0 <fsm_modify_mode+0x28>
		if(is_button_pressed(SET_BUTTON_ENCODE)) {
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff fc4d 	bl	8000b38 <is_button_pressed>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d022      	beq.n	80012ea <fsm_modify_mode+0x62>
			redCountDown = get_buffer();
 80012a4:	f7ff fb0e 	bl	80008c4 <get_buffer>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <fsm_modify_mode+0x98>)
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01c      	b.n	80012ea <fsm_modify_mode+0x62>
		}
	}
	else if (colorDecode == YELLOW_LED) {
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d10b      	bne.n	80012ce <fsm_modify_mode+0x46>
		if(is_button_pressed(SET_BUTTON_ENCODE)) {
 80012b6:	2002      	movs	r0, #2
 80012b8:	f7ff fc3e 	bl	8000b38 <is_button_pressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d013      	beq.n	80012ea <fsm_modify_mode+0x62>
			yelCountDown = get_buffer();
 80012c2:	f7ff faff 	bl	80008c4 <get_buffer>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <fsm_modify_mode+0x9c>)
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e00d      	b.n	80012ea <fsm_modify_mode+0x62>
		}
	}
	else if (colorDecode == GREEN_LED) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d10a      	bne.n	80012ea <fsm_modify_mode+0x62>
		if(is_button_pressed(SET_BUTTON_ENCODE)) {
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fc2f 	bl	8000b38 <is_button_pressed>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <fsm_modify_mode+0x62>
			greCountDown = get_buffer();
 80012e0:	f7ff faf0 	bl	80008c4 <get_buffer>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <fsm_modify_mode+0xa0>)
 80012e8:	6013      	str	r3, [r2, #0]
		}
	}

	if(timer_flag_blink_led) {
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <fsm_modify_mode+0xa4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <fsm_modify_mode+0x7a>
		setTimerBlinkLed(BLINK_LED_COUNTER);
 80012f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f6:	f7ff fe31 	bl	8000f5c <setTimerBlinkLed>
		blinkLed(colorDecode);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ffcb 	bl	8000298 <blinkLed>
	}
	set7Seg4BCD(trafficLightMode, get_buffer());
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <fsm_modify_mode+0xa8>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461c      	mov	r4, r3
 8001308:	f7ff fadc 	bl	80008c4 <get_buffer>
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff fa6f 	bl	80007f4 <set7Seg4BCD>
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000004 	.word	0x20000004
 8001324:	20000008 	.word	0x20000008
 8001328:	2000000c 	.word	0x2000000c
 800132c:	20000078 	.word	0x20000078
 8001330:	20000090 	.word	0x20000090

08001334 <reset_fsm_modify_mode>:
void reset_fsm_modify_mode(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	setTimerBlinkLed(BLINK_LED_COUNTER);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f7ff fe0e 	bl	8000f5c <setTimerBlinkLed>
	reset_buffer();
 8001340:	f7ff fab4 	bl	80008ac <reset_buffer>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <is_light_num_valid>:
// Return: Limitation of light number is valid
int is_light_num_valid(void) {
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return (redCountDown + 1 == yelCountDown + greCountDown + 2);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <is_light_num_valid+0x28>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <is_light_num_valid+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4413      	add	r3, r2
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <is_light_num_valid+0x30>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	2000000c 	.word	0x2000000c
 8001378:	20000004 	.word	0x20000004

0800137c <fsm_traffic_light_mode>:
void fsm_traffic_light_mode(void) {
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
	switch(trafficLightMode) {
 8001380:	4b68      	ldr	r3, [pc, #416]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	2b05      	cmp	r3, #5
 8001388:	f200 80c9 	bhi.w	800151e <fsm_traffic_light_mode+0x1a2>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <fsm_traffic_light_mode+0x18>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013f1 	.word	0x080013f1
 8001398:	0800142d 	.word	0x0800142d
 800139c:	08001469 	.word	0x08001469
 80013a0:	080014a5 	.word	0x080014a5
 80013a4:	080013ad 	.word	0x080013ad
 80013a8:	080014f9 	.word	0x080014f9
	case INIT_MODE:
		trafficLightMode = NORMAL_MODE;
 80013ac:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
		init_timer();
 80013b2:	f7ff fe0b 	bl	8000fcc <init_timer>
		redCountDown = RED_LIGHT_LIMIT * SECOND_UNIT;
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <fsm_traffic_light_mode+0x1ac>)
 80013b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80013bc:	601a      	str	r2, [r3, #0]
		yelCountDown = YELLOW_LIGHT_LIMIT * SECOND_UNIT;
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <fsm_traffic_light_mode+0x1b0>)
 80013c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c4:	601a      	str	r2, [r3, #0]
		greCountDown = GREEN_LIGHT_LIMIT * SECOND_UNIT;
 80013c6:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <fsm_traffic_light_mode+0x1b4>)
 80013c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013cc:	601a      	str	r2, [r3, #0]
		trafficLightOn(RED1);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7fe febc 	bl	800014c <trafficLightOn>
		trafficLightOn(GREEN2);
 80013d4:	2004      	movs	r0, #4
 80013d6:	f7fe feb9 	bl	800014c <trafficLightOn>
		reset_fsm_normal_mode();
 80013da:	f7ff fe77 	bl	80010cc <reset_fsm_normal_mode>
		set7Seg4BCD(firstWayCounter, secondWayCounter);
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <fsm_traffic_light_mode+0x1b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a55      	ldr	r2, [pc, #340]	; (8001538 <fsm_traffic_light_mode+0x1bc>)
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fa03 	bl	80007f4 <set7Seg4BCD>
		break;
 80013ee:	e096      	b.n	800151e <fsm_traffic_light_mode+0x1a2>
	case NORMAL_MODE:
		fsm_normal_mode();
 80013f0:	f7ff feb2 	bl	8001158 <fsm_normal_mode>
		if(is_button_pressed(MODE_BUTTON_ENCODE)) {
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fb9f 	bl	8000b38 <is_button_pressed>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8085 	beq.w	800150c <fsm_traffic_light_mode+0x190>
			trafficLightMode = MODIFY_RED_MODE;
 8001402:	4b48      	ldr	r3, [pc, #288]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001404:	2202      	movs	r2, #2
 8001406:	701a      	strb	r2, [r3, #0]
			reset_fsm_normal_mode();
 8001408:	f7ff fe60 	bl	80010cc <reset_fsm_normal_mode>
			setUpBlinkLed(RED_LED);
 800140c:	2000      	movs	r0, #0
 800140e:	f7fe ff1b 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 8001412:	f7ff fa4b 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461c      	mov	r4, r3
 800141c:	f7ff fa52 	bl	80008c4 <get_buffer>
 8001420:	4603      	mov	r3, r0
 8001422:	4619      	mov	r1, r3
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff f9e5 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 800142a:	e06f      	b.n	800150c <fsm_traffic_light_mode+0x190>
	case MODIFY_RED_MODE:
		fsm_modify_mode(RED_LED);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff2b 	bl	8001288 <fsm_modify_mode>
		if(is_button_pressed(MODE_BUTTON_ENCODE)) {
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fb80 	bl	8000b38 <is_button_pressed>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d068      	beq.n	8001510 <fsm_traffic_light_mode+0x194>
			trafficLightMode = MODIFY_YELLOW_MODE;
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
			reset_fsm_modify_mode();
 8001444:	f7ff ff76 	bl	8001334 <reset_fsm_modify_mode>
			setUpBlinkLed(YELLOW_LED);
 8001448:	2002      	movs	r0, #2
 800144a:	f7fe fefd 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 800144e:	f7ff fa2d 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461c      	mov	r4, r3
 8001458:	f7ff fa34 	bl	80008c4 <get_buffer>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff f9c7 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 8001466:	e053      	b.n	8001510 <fsm_traffic_light_mode+0x194>
	case MODIFY_YELLOW_MODE:
		fsm_modify_mode(YELLOW_LED);
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff ff0d 	bl	8001288 <fsm_modify_mode>
		if(is_button_pressed(MODE_BUTTON_ENCODE)) {
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fb62 	bl	8000b38 <is_button_pressed>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04c      	beq.n	8001514 <fsm_traffic_light_mode+0x198>
			trafficLightMode = MODIFY_GREEN_MODE;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 800147c:	2204      	movs	r2, #4
 800147e:	701a      	strb	r2, [r3, #0]
			reset_fsm_modify_mode();
 8001480:	f7ff ff58 	bl	8001334 <reset_fsm_modify_mode>
			setUpBlinkLed(GREEN_LED);
 8001484:	2001      	movs	r0, #1
 8001486:	f7fe fedf 	bl	8000248 <setUpBlinkLed>
			reset_buffer();
 800148a:	f7ff fa0f 	bl	80008ac <reset_buffer>
			set7Seg4BCD(trafficLightMode, get_buffer());
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461c      	mov	r4, r3
 8001494:	f7ff fa16 	bl	80008c4 <get_buffer>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff f9a9 	bl	80007f4 <set7Seg4BCD>
		}
		break;
 80014a2:	e037      	b.n	8001514 <fsm_traffic_light_mode+0x198>
	case MODIFY_GREEN_MODE:
		fsm_modify_mode(GREEN_LED);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff feef 	bl	8001288 <fsm_modify_mode>
		if(is_button_pressed(MODE_BUTTON_ENCODE)) {
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fb44 	bl	8000b38 <is_button_pressed>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d030      	beq.n	8001518 <fsm_traffic_light_mode+0x19c>
			if(is_light_num_valid()) {
 80014b6:	f7ff ff47 	bl	8001348 <is_light_num_valid>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <fsm_traffic_light_mode+0x16c>
				trafficLightMode = NORMAL_MODE;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
				trafficLightOn(RED1);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7fe fe40 	bl	800014c <trafficLightOn>
				trafficLightOn(GREEN2);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f7fe fe3d 	bl	800014c <trafficLightOn>
				reset_fsm_normal_mode();
 80014d2:	f7ff fdfb 	bl	80010cc <reset_fsm_normal_mode>
				set7Seg4BCD(firstWayCounter, secondWayCounter);
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <fsm_traffic_light_mode+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <fsm_traffic_light_mode+0x1bc>)
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f987 	bl	80007f4 <set7Seg4BCD>
				trafficLightMode = ERROR_MODE;
				set7Seg4BCD(ERROR_7SEG_DISPLAY_1, ERROR_7SEG_DISPLAY_0);
			}

		}
		break;
 80014e6:	e017      	b.n	8001518 <fsm_traffic_light_mode+0x19c>
				trafficLightMode = ERROR_MODE;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 80014ea:	2206      	movs	r2, #6
 80014ec:	701a      	strb	r2, [r3, #0]
				set7Seg4BCD(ERROR_7SEG_DISPLAY_1, ERROR_7SEG_DISPLAY_0);
 80014ee:	2163      	movs	r1, #99	; 0x63
 80014f0:	2063      	movs	r0, #99	; 0x63
 80014f2:	f7ff f97f 	bl	80007f4 <set7Seg4BCD>
		break;
 80014f6:	e00f      	b.n	8001518 <fsm_traffic_light_mode+0x19c>
	case ERROR_MODE:
		if(is_button_pressed(MODE_BUTTON_ENCODE)) {
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff fb1d 	bl	8000b38 <is_button_pressed>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <fsm_traffic_light_mode+0x1a0>
			trafficLightMode = INIT_MODE;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <fsm_traffic_light_mode+0x1a8>)
 8001506:	2205      	movs	r2, #5
 8001508:	701a      	strb	r2, [r3, #0]
		}
		break;
 800150a:	e007      	b.n	800151c <fsm_traffic_light_mode+0x1a0>
		break;
 800150c:	bf00      	nop
 800150e:	e006      	b.n	800151e <fsm_traffic_light_mode+0x1a2>
		break;
 8001510:	bf00      	nop
 8001512:	e004      	b.n	800151e <fsm_traffic_light_mode+0x1a2>
		break;
 8001514:	bf00      	nop
 8001516:	e002      	b.n	800151e <fsm_traffic_light_mode+0x1a2>
		break;
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <fsm_traffic_light_mode+0x1a2>
		break;
 800151c:	bf00      	nop
	}
}
 800151e:	bf00      	nop
 8001520:	bd98      	pop	{r3, r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000090 	.word	0x20000090
 8001528:	20000004 	.word	0x20000004
 800152c:	20000008 	.word	0x20000008
 8001530:	2000000c 	.word	0x2000000c
 8001534:	200000dc 	.word	0x200000dc
 8001538:	200000e0 	.word	0x200000e0

0800153c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff fcd0 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001542:	490c      	ldr	r1, [pc, #48]	; (8001574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001558:	4c09      	ldr	r4, [pc, #36]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f001 fb05 	bl	8002b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff fb19 	bl	8000ba0 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001578:	08002c10 	.word	0x08002c10
  ldr r2, =_sbss
 800157c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001580:	200000e8 	.word	0x200000e8

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x28>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f923 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fc14 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f93b 	bl	800184e <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f903 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	20000014 	.word	0x20000014
 8001610:	20000010 	.word	0x20000010

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_IncTick+0x20>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000014 	.word	0x20000014
 8001634:	200000e4 	.word	0x200000e4

08001638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	200000e4 	.word	0x200000e4

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff2d 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff42 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff35 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e148      	b.n	8001b0e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800187c:	2201      	movs	r2, #1
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8137 	bne.w	8001b08 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4aa3      	ldr	r2, [pc, #652]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d05e      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018a4:	4aa1      	ldr	r2, [pc, #644]	; (8001b2c <HAL_GPIO_Init+0x2c4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d875      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018aa:	4aa1      	ldr	r2, [pc, #644]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d058      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018b0:	4a9f      	ldr	r2, [pc, #636]	; (8001b30 <HAL_GPIO_Init+0x2c8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d86f      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018b6:	4a9f      	ldr	r2, [pc, #636]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d052      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018bc:	4a9d      	ldr	r2, [pc, #628]	; (8001b34 <HAL_GPIO_Init+0x2cc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d869      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018c2:	4a9d      	ldr	r2, [pc, #628]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04c      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018c8:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <HAL_GPIO_Init+0x2d0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d863      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018ce:	4a9b      	ldr	r2, [pc, #620]	; (8001b3c <HAL_GPIO_Init+0x2d4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d046      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
 80018d4:	4a99      	ldr	r2, [pc, #612]	; (8001b3c <HAL_GPIO_Init+0x2d4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d85d      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d82a      	bhi.n	8001934 <HAL_GPIO_Init+0xcc>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d859      	bhi.n	8001996 <HAL_GPIO_Init+0x12e>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_GPIO_Init+0x80>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001963 	.word	0x08001963
 80018ec:	0800193d 	.word	0x0800193d
 80018f0:	0800194f 	.word	0x0800194f
 80018f4:	08001991 	.word	0x08001991
 80018f8:	08001997 	.word	0x08001997
 80018fc:	08001997 	.word	0x08001997
 8001900:	08001997 	.word	0x08001997
 8001904:	08001997 	.word	0x08001997
 8001908:	08001997 	.word	0x08001997
 800190c:	08001997 	.word	0x08001997
 8001910:	08001997 	.word	0x08001997
 8001914:	08001997 	.word	0x08001997
 8001918:	08001997 	.word	0x08001997
 800191c:	08001997 	.word	0x08001997
 8001920:	08001997 	.word	0x08001997
 8001924:	08001997 	.word	0x08001997
 8001928:	08001997 	.word	0x08001997
 800192c:	08001945 	.word	0x08001945
 8001930:	08001959 	.word	0x08001959
 8001934:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <HAL_GPIO_Init+0x2d8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193a:	e02c      	b.n	8001996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e029      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e024      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	3308      	adds	r3, #8
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e01f      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e01a      	b.n	8001998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196a:	2304      	movs	r3, #4
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e013      	b.n	8001998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	611a      	str	r2, [r3, #16]
          break;
 8001982:	e009      	b.n	8001998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	615a      	str	r2, [r3, #20]
          break;
 800198e:	e003      	b.n	8001998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x130>
          break;
 8001996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d801      	bhi.n	80019a2 <HAL_GPIO_Init+0x13a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_Init+0x13e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d802      	bhi.n	80019b4 <HAL_GPIO_Init+0x14c>
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x152>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3b08      	subs	r3, #8
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	210f      	movs	r1, #15
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8090 	beq.w	8001b08 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e8:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a55      	ldr	r2, [pc, #340]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_GPIO_Init+0x2dc>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x2e0>)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x2e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1e0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2e8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_GPIO_Init+0x2ec>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1d8>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1e2>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5a:	493b      	ldr	r1, [pc, #236]	; (8001b48 <HAL_GPIO_Init+0x2e0>)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4933      	ldr	r1, [pc, #204]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	492d      	ldr	r1, [pc, #180]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4929      	ldr	r1, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4923      	ldr	r1, [pc, #140]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	491f      	ldr	r1, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4919      	ldr	r1, [pc, #100]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4915      	ldr	r1, [pc, #84]	; (8001b58 <HAL_GPIO_Init+0x2f0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aeaf 	bne.w	800187c <HAL_GPIO_Init+0x14>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	372c      	adds	r7, #44	; 0x2c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bcc:	887a      	ldrh	r2, [r7, #2]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	400b      	ands	r3, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e26c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8087 	beq.w	8001d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d00c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c18:	4b8f      	ldr	r3, [pc, #572]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d112      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d10b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c32:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d06c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x12c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d168      	bne.n	8001d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e246      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x76>
 8001c54:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e02e      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x98>
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b78      	ldr	r3, [pc, #480]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xbc>
 8001c8e:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a71      	ldr	r2, [pc, #452]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6a      	ldr	r2, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a67      	ldr	r2, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fcb6 	bl	8001638 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fcb2 	bl	8001638 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1fa      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe4>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fca2 	bl	8001638 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fc9e 	bl	8001638 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1e6      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x10c>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4939      	ldr	r1, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fc57 	bl	8001638 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fc53 	bl	8001638 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e19b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fc36 	bl	8001638 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fc32 	bl	8001638 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e17a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d03a      	beq.n	8001e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d019      	beq.n	8001e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fc16 	bl	8001638 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc12 	bl	8001638 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e15a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 fa9a 	bl	8002368 <RCC_Delay>
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fbfc 	bl	8001638 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fbf8 	bl	8001638 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d908      	bls.n	8001e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e140      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	42420000 	.word	0x42420000
 8001e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e9      	bne.n	8001e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a6 	beq.w	8001fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b94      	ldr	r3, [pc, #592]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a93      	ldr	r2, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b91      	ldr	r3, [pc, #580]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fbb9 	bl	8001638 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff fbb5 	bl	8001638 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0fd      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x312>
 8001ef0:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e02d      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x334>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a72      	ldr	r2, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x356>
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a69      	ldr	r2, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a63      	ldr	r2, [pc, #396]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb69 	bl	8001638 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb65 	bl	8001638 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0ab      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x37e>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb53 	bl	8001638 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb4f 	bl	8001638 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e095      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8081 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d061      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d146      	bne.n	8002076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb23 	bl	8001638 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fb1f 	bl	8001638 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e067      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d108      	bne.n	8002030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	492d      	ldr	r1, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a19      	ldr	r1, [r3, #32]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	430b      	orrs	r3, r1
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff faf3 	bl	8001638 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff faef 	bl	8001638 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e037      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x46a>
 8002074:	e02f      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fadc 	bl	8001638 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff fad8 	bl	8001638 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x498>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff fa2c 	bl	8001638 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff fa28 	bl	8001638 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f98a 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08002be4 	.word	0x08002be4
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000010 	.word	0x20000010

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ee:	e027      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	e027      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002322:	fb02 f203 	mul.w	r2, r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e004      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	613b      	str	r3, [r7, #16]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	08002bf4 	.word	0x08002bf4
 8002360:	08002c04 	.word	0x08002c04
 8002364:	003d0900 	.word	0x003d0900

08002368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <RCC_Delay+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <RCC_Delay+0x38>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002384:	bf00      	nop
  }
  while (Delay --);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	60fa      	str	r2, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <RCC_Delay+0x1c>
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	20000000 	.word	0x20000000
 80023a0:	10624dd3 	.word	0x10624dd3

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e041      	b.n	800243a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fd32 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 fa6e 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d001      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e035      	b.n	80024c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_TIM_Base_Start_IT+0x90>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_TIM_Base_Start_IT+0x4e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002486:	d004      	beq.n	8002492 <HAL_TIM_Base_Start_IT+0x4e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <HAL_TIM_Base_Start_IT+0x94>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d010      	beq.n	80024c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b4:	e007      	b.n	80024c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400

080024dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9b4 	bl	800288c <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f9a7 	bl	800287a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9b6 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0204 	mvn.w	r2, #4
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f98a 	bl	800288c <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f97d 	bl	800287a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f98c 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0208 	mvn.w	r2, #8
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2204      	movs	r2, #4
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f960 	bl	800288c <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f953 	bl	800287a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f962 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0210 	mvn.w	r2, #16
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2208      	movs	r2, #8
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f936 	bl	800288c <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f929 	bl	800287a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f938 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0201 	mvn.w	r2, #1
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fcca 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa6b 	bl	8002b62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8fc 	bl	80028b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0220 	mvn.w	r2, #32
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa36 	bl	8002b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIM_ConfigClockSource+0x1c>
 8002704:	2302      	movs	r3, #2
 8002706:	e0b4      	b.n	8002872 <HAL_TIM_ConfigClockSource+0x186>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800272e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002740:	d03e      	beq.n	80027c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002746:	f200 8087 	bhi.w	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274e:	f000 8086 	beq.w	800285e <HAL_TIM_ConfigClockSource+0x172>
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	d87f      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d01a      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xa6>
 800275c:	2b70      	cmp	r3, #112	; 0x70
 800275e:	d87b      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b60      	cmp	r3, #96	; 0x60
 8002762:	d050      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x11a>
 8002764:	2b60      	cmp	r3, #96	; 0x60
 8002766:	d877      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b50      	cmp	r3, #80	; 0x50
 800276a:	d03c      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xfa>
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d873      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d058      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x13a>
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d86f      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d064      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b30      	cmp	r3, #48	; 0x30
 800277e:	d86b      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d060      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x15a>
 8002784:	2b20      	cmp	r3, #32
 8002786:	d867      	bhi.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d05c      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	2b10      	cmp	r3, #16
 800278e:	d05a      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x15a>
 8002790:	e062      	b.n	8002858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f000 f95e 	bl	8002a62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	609a      	str	r2, [r3, #8]
      break;
 80027be:	e04f      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f000 f947 	bl	8002a62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027e2:	609a      	str	r2, [r3, #8]
      break;
 80027e4:	e03c      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f8be 	bl	8002974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2150      	movs	r1, #80	; 0x50
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f915 	bl	8002a2e <TIM_ITRx_SetConfig>
      break;
 8002804:	e02c      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	461a      	mov	r2, r3
 8002814:	f000 f8dc 	bl	80029d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2160      	movs	r1, #96	; 0x60
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f905 	bl	8002a2e <TIM_ITRx_SetConfig>
      break;
 8002824:	e01c      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f000 f89e 	bl	8002974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2140      	movs	r1, #64	; 0x40
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f8f5 	bl	8002a2e <TIM_ITRx_SetConfig>
      break;
 8002844:	e00c      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f000 f8ec 	bl	8002a2e <TIM_ITRx_SetConfig>
      break;
 8002856:	e003      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e000      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800285e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
	...

080028c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a25      	ldr	r2, [pc, #148]	; (800296c <TIM_Base_SetConfig+0xa8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x28>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x28>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <TIM_Base_SetConfig+0xac>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <TIM_Base_SetConfig+0xa8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x52>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x52>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <TIM_Base_SetConfig+0xac>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <TIM_Base_SetConfig+0xa8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	615a      	str	r2, [r3, #20]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400

08002974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f023 0201 	bic.w	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f023 030a 	bic.w	r3, r3, #10
 80029b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	621a      	str	r2, [r3, #32]
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f023 0210 	bic.w	r2, r3, #16
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f043 0307 	orr.w	r3, r3, #7
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b087      	sub	sp, #28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e041      	b.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d004      	beq.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10c      	bne.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40000400 	.word	0x40000400

08002b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <__libc_init_array>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2600      	movs	r6, #0
 8002b78:	4d0c      	ldr	r5, [pc, #48]	; (8002bac <__libc_init_array+0x38>)
 8002b7a:	4c0d      	ldr	r4, [pc, #52]	; (8002bb0 <__libc_init_array+0x3c>)
 8002b7c:	1b64      	subs	r4, r4, r5
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	42a6      	cmp	r6, r4
 8002b82:	d109      	bne.n	8002b98 <__libc_init_array+0x24>
 8002b84:	f000 f822 	bl	8002bcc <_init>
 8002b88:	2600      	movs	r6, #0
 8002b8a:	4d0a      	ldr	r5, [pc, #40]	; (8002bb4 <__libc_init_array+0x40>)
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <__libc_init_array+0x44>)
 8002b8e:	1b64      	subs	r4, r4, r5
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	42a6      	cmp	r6, r4
 8002b94:	d105      	bne.n	8002ba2 <__libc_init_array+0x2e>
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9c:	4798      	blx	r3
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	e7ee      	b.n	8002b80 <__libc_init_array+0xc>
 8002ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba6:	4798      	blx	r3
 8002ba8:	3601      	adds	r6, #1
 8002baa:	e7f2      	b.n	8002b92 <__libc_init_array+0x1e>
 8002bac:	08002c08 	.word	0x08002c08
 8002bb0:	08002c08 	.word	0x08002c08
 8002bb4:	08002c08 	.word	0x08002c08
 8002bb8:	08002c0c 	.word	0x08002c0c

08002bbc <memset>:
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4402      	add	r2, r0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <memset+0xa>
 8002bc4:	4770      	bx	lr
 8002bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bca:	e7f9      	b.n	8002bc0 <memset+0x4>

08002bcc <_init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr

08002bd8 <_fini>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	bf00      	nop
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr
